{Application 'INDIVIDUALLFS' logic file generated by CSPro}
// Definition of Global Variables and Functions
PROC GLOBAL

{Changes mades to addapt to an individual structured questionnaire: Pachalo, 11 Dec, 2022
----------------------------------------------------------------------


01. Changed variable DEM_AG1 to AGE_ELG 
02. Changed number of occurences for LABOR_REC_FORM from 20 to 1 
03. Replaced (curocc()) with space for now single occuring items (Items in LABOR_REC_FORM)

}



function time_use_ind() 

    // change the following filename to your desired output 
    string pff_filename = path.concat(Application, "../TimeUse/TimeUse.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 
    filewrite(dynamic_pff, "ShowInApplicationListing=Never"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
    filewrite(dynamic_pff, "StartMode=Add"); 
    filewrite(dynamic_pff, "Key=%s", maketext("%v%v%v%v",XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO)); 
    filewrite(dynamic_pff, "Lock=CaseListing"); 

    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./TimeUse.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Timeuse.csdb"); 

    filewrite(dynamic_pff, "[Parameters]"); 
    filewrite(dynamic_pff, "TCLUSTER=%v", XCLUSTER); 
    filewrite(dynamic_pff, "TGHHHNO=%v", XGHHHNO); 
    filewrite(dynamic_pff, "THMPPNO=%v", XHMPPNO); 
    filewrite(dynamic_pff, "TGHINTCODE=%v", GHINTCODE); 
    filewrite(dynamic_pff, "TGHINTNAME=%v", CH_GHINTNAME); 
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff),stop); 

end; 


function launchChild() 

    // change the following filename to your desired output 
    string pff_filename = path.concat(Application, "../ChildLFS/ChildLFS.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
	filewrite(dynamic_pff, "Key=%s", maketext("%v%v%v%v",XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO));
	filewrite(dynamic_pff, "StartMode=Add");
	filewrite(dynamic_pff,"Lock=CaseListing");
	filewrite(dynamic_pff,"ShowInApplicationListing=Never");


    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./ChildLFS.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Child.csdb"); 

    filewrite(dynamic_pff, "[ExternalFiles]"); 
    filewrite(dynamic_pff, "CLUSTERS_DICT=%v", "../Lookups/clusters.csdb"); 
    filewrite(dynamic_pff, "HOUSEHOLDLFS_DICT=%v", "../Data/Household.csdb"); 
    filewrite(dynamic_pff, "INDIVIDUALLFS_DICT=%v", "../Data/Individual.csdb"); 

    filewrite(dynamic_pff, "[Parameters]");
	filewrite(dynamic_pff, "CCLUSTER=%v", XCLUSTER);	//Cluster number
	filewrite(dynamic_pff, "CGHHHNO=%v", XGHHHNO); 		//Household number
	filewrite(dynamic_pff, "CHMPPNO=%v", XHMPPNO); 		//Child's line number
	//filewrite(dynamic_pff, "A1=%s", getlabel(INTERVIEW_CHILD,INTERVIEW_CHILD)); 	//Child's name	
	filewrite(dynamic_pff, "GHINTID=%s", GHINTCODE); 					//Interviewer ID
	filewrite(dynamic_pff, "GHINTNAME=%s", CH_GHINTNAME); 	//Interviewer name
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff), stop); 

end; 



//National Adaptation Variables that are controlled from the National Adaptation Tool (NAT):
	string nav_country = "Malawi";
	numeric NWAP = 15;
	string nav_edu_levels;
	string nav_study_field; //Default ISCED-F
	string nav_farming_prod = "rice, tea, flowers, rubber, etc.";
	string nav_animal_prod = "sheep, goats, pigs, chicken or cattle";	
	string nav_week_start_day = "Monday";
	string nav_week_end_day = "Sunday";
	string nav_job_type = "Fishing or fish farming";
	string nav_products; //Default ISIC
	string nav_products_eg = "CITRUS FRUITS, VEGETABLES, FRESHWATER FISH, CATTLE, CHICKEN, RICE";
	string nav_tasks; //Default ISCO
	string nav_income_activity_eg = "making things for sale, growing produce for sale, buying and reselling things, provided services for pay, raising animals or catching fish for sale";
	string nav_work_type_eg = "CATTLE FARMER; POLICEMAN; COOK; PRIMARY SCHOOL TEACHER";
	string nav_tasks_duties_eg = "BREED, RAISE AND SELL CATTLE; PATROL THE STREETS; PLAN AND PREPARE MEALS; TEACH CHILDREN HOW TO READ AND WRITE";
	string nav_employee = "employee";
	string nav_main_activity_eg = "POLICE DEPARTMENT - PUBLIC SAFETY; RESTAURANT - PREPARING AND SERVING MEALS; TRANSPORT COMPANY - LONG DISTANCE TRANSPORT OF GOODS";
	string nav_business_type = "limited company or partnership";
	string nav_national_business_register = "National Business Register";
	string nav_accounts_type = "assets, income and expenditures, that is a complete balance sheet";
	string nav_social_contributions_systems = "Pension Fund/Health/Unemployment Insurance";
	numeric nav_week_working_hours = 40; //NOTE: The threshold may be customized to the national context. In all cases it should not be below 30 hours
	string nav_employment_center = "PUBLIC EMPLOYMENT CENTER";
	string nav_animals = "sheep, goats, chicken...";
	string nav_wild_food = "mushrooms, berries, herbs...";
	string nav_hunting = "bush meat...";
	string nav_food_drinks = "flour, dried fish, butter, cheese,...";
	string nav_natural_products = "or other natural products";
	string nav_goods = "mats, baskets, furniture, clothing,..";
	string nav_stateless = "STATELESS";
	string nav_fishing = "Fishing, pond fishing or collecting shellfish";
	string nav_or_fishing = "or fishing";
	string nav_agency = "National Statistical Office";
	string nav_DEM_CONF = "This household has been selected to participate in a government survey about the activities that people do to earn a living. The information that you will provide is confidential and will not be shared, but it will help better understand how people in this area live, the jobs they do. Your participation is voluntary. The survey will take approximately 50 minutes. Before I continue with the survey, I need some information about the members of this household"; 
	numeric nav_DEM_EDF_EDL_threshold = 6;

	string nav_worker = "DOMESTIC WORKER"; 
	string nav_main_crops_eg = "cassava, rice, â¦";
	
	numeric mjd_boss_tax_a;
	numeric mjd_boss_tax_b;
	
	function dem_relationship()
			loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO);
			XDEM_REL = DEM_02 (XHMPPNO);
			dem_relationship = DEM_02 (XHMPPNO);
	end;
	

// Menu Cotrolled Variables:
	numeric MCV_PROVINCE;
	numeric MCV_DISTRICT;
	numeric MCV_GHDWNO;
	numeric MCV_GHHHNO;
	numeric MCV_GHAREA;
	numeric MCV_GHINTID;
	string  MCV_INTERVIEWER_NAME = "Popstan Interviewer";
			
// Global flow variables to manage the interview flow:
	numeric GLO_EMP;  	// Global flag for confirmed employed respondents
	numeric GLO_PROV;  	// Global flag for provisional employed respondents
	numeric GLO_OPF;  	// Global flag for own-use producers of foodstuff
	numeric GLO_MLT;  	// Global flag for persons with work in agriculture and in another sector 

// Aternative variables used to recalculate GLO variables when AGF module is removed:
	string AGF_ANY_V="0";
	numeric AGF_MKT_V=0;
	numeric AGF_HIS_V=0;
	numeric AGF_HIR_V=0;
	string AGF_CHK_V="0";
	string get_c_and_or = "";

// Functions used to (re)set GLO variables after different modules:
	
	// Reset all GLO variables:
	function reset_GLO()
		GLO_EMP  = 0; 
		GLO_PROV = 0;  
		GLO_OPF  = 0;  
		GLO_MLT  = 0;  
	end;	
	
	// Set GLO variables based on ATW module:
	function set_GLO_ATW()
		if ATW_PAY = 1 or (ATW_PFT = 1 or ATW_FAM = 1) or XDEM_REL = 13 then
		  GLO_EMP = 1;
		endif;
	
		if ATW_PFT = 1 or ATW_FAM = 1 then
		  GLO_PROV = 1;
		endif;
	end;
	
	// Set GLO variables based on ABS module:
	function set_GLO_ABS()
		if ABS_JOB = 1 and (ABS_WHY in 3,4,5,6 or (ABS_WHY = 2 and ABS_SEA = 1) or (ABS_WHY in 7,8,9,10,11,12,13 and ABS_DUR=1) or (ABS_WHY in 7,8,9,10,11,12,13 and ABS_DUR in 2,97 and ABS_PAY=1)) then
		  GLO_EMP = 1;
		endif;
		
		if ABS_JOB = 1 and (ABS_WHY in 3,4,5,6 or (ABS_WHY = 2 and ABS_SEA = 1) or (ABS_WHY in 7,8,9,10,11,12,13 and ABS_DUR=1) or (ABS_WHY in 7,8,9,10,11,12,13 and ABS_DUR in 2,97 and ABS_PAY=1)) then
		  GLO_PROV = 1;
		endif;
	end;
	
	// Set GLO variables based on AGF module (using null(_V) variables - in case the module is excluded from the survey):
	//Renamed set_GLO_AGF to set_GLO_AGF_V
	function set_GLO_AGF_V()
		if (pos("a",AGF_ANY_V)>0 or pos("b",AGF_ANY_V)>0 or pos("c",AGF_ANY_V)>0) and (AGF_MKT_V in 1,2 or AGF_HIS_V in 1,2 or AGF_HIR_V = 1) then
		  GLO_EMP = 1;
		endif;
		
		if GLO_PROV=1 and pos("d",AGF_CHK_V)=0 and AGF_HIR_V = 2 then
		  GLO_EMP = 0;
		endif;
		
		if (GLO_PROV=1 and ((pos("a",AGF_CHK_V)>0 or pos("b",AGF_CHK_V)>0 or pos("c",AGF_CHK_V)>0) and pos("d",AGF_CHK_V)>0)) and (AGF_MKT_V in 1,2 or AGF_HIS_V in 1,2 or AGF_HIR_V = 1) then
		  GLO_MLT = 1;
		endif;
		
		if (GLO_PROV=1 and ((pos("a",AGF_CHK_V)>0 or pos("b",AGF_CHK_V)>0 or pos("c",AGF_CHK_V)>0) and pos("d",AGF_CHK_V)>0)) and (AGF_HIR_V = 2) then
		  GLO_MLT = 2;
		endif;
		
		if (GLO_EMP = 1 and (pos("a",AGF_ANY_V)>0 or pos("b",AGF_ANY_V)>0 or pos("c",AGF_ANY_V)>0)) or
			(((pos("a",AGF_CHK_V)>0 or pos("b",AGF_CHK_V)>0 or pos("c",AGF_CHK_V)>0) and pos("d",AGF_CHK_V)=0) and (AGF_MKT_V in 1,2 or AGF_HIS_V in 1,2 or AGF_HIR_V = 1)) then
			GLO_MLT = 3;
		endif;
		
		if AGF_HIR_V = 2 then
		  GLO_OPF = 1;
		endif;
	end;
	

	// Set GLO variables based on AGF module , Pachalo :
	function set_GLO_AGF()
		if (pos("a",AGF_ANY)>0 or pos("b",AGF_ANY)>0 or pos("c",AGF_ANY)>0) and (AGF_MKT in 1,2 or AGF_HIS in 1,2 or AGF_HIR = 1) then
		  GLO_EMP = 1;
		endif;
		
		if GLO_PROV=1 and pos("d",AGF_CHK)=0 and AGF_HIR = 2 then
		  GLO_EMP = 0;
		endif;
		
		if (GLO_PROV=1 and ((pos("a",AGF_CHK)>0 or pos("b",AGF_CHK)>0 or pos("c",AGF_CHK)>0) and pos("d",AGF_CHK)>0)) and (AGF_MKT in 1,2 or AGF_HIS in 1,2 or AGF_HIR = 1) then
		  GLO_MLT = 1;
		endif;
		
		if (GLO_PROV=1 and ((pos("a",AGF_CHK_V)>0 or pos("b",AGF_CHK_V)>0 or pos("c",AGF_CHK_V)>0) and pos("d",AGF_CHK_V)>0)) and (AGF_HIR_V = 2) then
		  GLO_MLT = 2;
		endif;
		
		if (GLO_EMP = 1 and (pos("a",AGF_ANY_V)>0 or pos("b",AGF_ANY_V)>0 or pos("c",AGF_ANY_V)>0)) or
			(((pos("a",AGF_CHK)>0 or pos("b",AGF_CHK)>0 or pos("c",AGF_CHK)>0) and pos("d",AGF_CHK)=0) and (AGF_MKT in 1,2 or AGF_HIS in 1,2 or AGF_HIR = 1)) then
			GLO_MLT = 3;
		endif;
		
		if AGF_HIR = 2 then
		  GLO_OPF = 1;
		endif;
	end;
	
	

{

	// Set GLO variables based on MJJ module , Pachalo :
	function set_GLO_AGF_P()
		if ((pos("a",AGF_ANY)>0 or pos("b",AGF_ANY)>0 or pos("c",AGF_ANY)>0) and (AGF_MKT in 1,2)) or
		   ((pos("a",AGF_ANY)>0 or pos("b",AGF_ANY)>0 or pos("c",AGF_ANY)>0) and (AGF_HIS in 1,2)) or
		   ((pos("a",AGF_ANY)>0 or pos("b",AGF_ANY)>0 or pos("c",AGF_ANY)>0) and (AGF_HIR = 1)) then
		  
			GLO_EMP = 1;
			
		endif;
		
		if (GLO_PROV=1 and pos("d",AGF_CHK)=0) and AGF_HIR = 2 then
		  GLO_EMP = 0;
		endif;
		
		if ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)>0) and (AGF_MKT in 1,2) or
		   ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)>0) and (AGF_HIS in 1,2) or 
		   ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)>0) and (AGF_HIS = 1)    then
		  
			GLO_MLT = 1;
		endif;
		
		if ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)>0) and (AGF_HIS = 2)   then
			GLO_MLT = 2;
		endif;
		
		if (GLO_EMP = 1 and (pos("a",AGF_ANY)>0 or pos("b",AGF_ANY)>0 or pos("c",AGF_ANY)>0)) 									or
		   ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)=0) and (AGF_MKT in 1,2) 	or
		   ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)=0) and (AGF_HIS in 1,2)	or 					
		   ((pos("a", AGF_CHK)>0 or pos("b", AGF_CHK)>0 or pos("c", AGF_CHK)>0) and pos("d",AGF_CHK)=0) and (AGF_HIR  = 1) 		then
			
			GLO_MLT = 3;
			
		endif;
		
		if AGF_HIR = 2 then
		  GLO_OPF = 1;
		endif;
	end;

}





// Variables used in the question text
	string last_4weeks_start_date; 
	string last_week_end_date;
	string nav_week_end_day_yesterday;
	string nav_job_type_short;
	numeric age_proxy = 0;
	numeric OPF_HFOOD_LEN;
	string FOOD_STRING;

// Functions to (re)set variables for interviewee name/proxy and sex:
	// (Re)set Sex variables:
	function string get_his_her()
		if XDEM_SEX = 1 then
		 	get_his_her = "his";
		else get_his_her = "her";
		endif;
	end;
	
	function string get_him_herself()
		if XDEM_SEX = 1 then
		 	get_him_herself = toupper("himself");
		else get_him_herself = toupper("herself");
		endif;
	end;
	
	// (Re)set Proxy varaibles:
	function string get_you_name()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_you_name = toupper(strip(XDEM_NAME));
		else get_you_name = "you";
		endif;
	end;
	
	function string get_do_does()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_do_does = "does";
		else get_do_does = "do";
		endif;
	end;
	
	function string get_have_has()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_have_has = "has";
		else get_have_has = "have";
		endif;
	end;
	
		function string get_were_was()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_were_was = "was";
		else get_were_was = "were";
		endif;
	end;
	
	function string get_work_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_work_s = "works";
		else get_work_s = "work";
		endif;
	end;
	
	function string get_are_is()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_are_is = "is";
		else get_are_is = "are";
		endif;
	end;
	
	function string get_your_names()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_your_names = toupper(strip(XDEM_NAME))+"'s";
		else get_your_names = "your";
		endif;
	end;
	
	function string get_this_names()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_this_names = toupper(strip(XDEM_NAME))+"'s";
		else get_this_names = "this";
		endif;
	end;
	
	function string get_want_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_want_s = "wants";
		else get_want_s = "want";
		endif;
	end;
	
	function string get_offer_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_offer_s = "offers";
		else get_offer_s = "offer";
		endif;
	end;
	
	function string get_expect_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_expect_s = "expects";
		else get_expect_s = "expect";
		endif;
	end;
	
	// (Re)set Proxy variables that have to start with capital letters:
	function string get_c_were_was()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_were_was = "Was";
		else get_c_were_was = "Were";
		endif;
	end;
	
	function string get_c_do_does()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_do_does = "Does";
		else get_c_do_does = "Do";
		endif;
	end;
	
	function string get_c_are_is()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_are_is = "Is";
		else get_c_are_is = "Are";
		endif;
	end;
	
	function string get_c_you_name()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_you_name = toupper(strip(XDEM_NAME));
		else get_c_you_name = "You";
		endif;
	end;
	
	function string get_c_have_has()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_have_has = "Has";
		else get_c_have_has = "Have";
		endif;
	end;
	

	// (Re)set Proxy/Sex:
		function string get_you_he_she()
			if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
			 	if XDEM_SEX = 1 then
			 	get_you_he_she = "he";
				else get_you_he_she = "she";
				endif;
			else get_you_he_she = "you";
			endif;
		end;
				
		function string get_your_his_her()
			if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
			 	if XDEM_SEX = 1 then
			 	get_your_his_her = "his";
				else get_your_his_her = "her";
				endif;
			else get_your_his_her = "your";
			endif;
		end;
	
	function string get_yourself_himself_herself()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	if XDEM_SEX = 1 then
		 	get_yourself_himself_herself = "himself";
			else get_yourself_himself_herself = "herself";
			endif;
		else get_yourself_himself_herself = "yourself";
		endif;
	end;
	

//Function to set value for SRH_JOB variable in the subsequent questions:	
	function string get_find_paid_job_start_business()
		if SRH_JOB  = 1 then
		 	get_find_paid_job_start_business = "find a paid job";
		else get_find_paid_job_start_business = "start a business";
		endif;
	end;

// Variables to fill question text for business/farm before interview:
	string business_farm;
	string farming_fish_animal_products;
	string farming_animal_rearing_fishing;
	string farming_fishing;
	string are_were;
	string last_12_months;
	numeric interview_date_timestamp;
	
// Arrays for set value set
	array codes(100);
	
	array string stringCodes(100);
	array string labels(100);
	
	array vsCodes(100);
	array string vsLabels(100);

// Set Occurrence Label for each member
	string curInfo;
	string curInfo2;

// Function to require input:
	function NotAllowBlankOtherSpecify(string otherField)
	      if length(strip(otherField)) = 0 then 
	         errmsg("Warning: Enter valid text or select code for DON'T KNOW.");
	         reenter;
	      endif;
	end;

// Function to calculate date for the start of last four weeks:
	function string calcLast4WeekDay(string wDay)
	    numeric dayStatic = 0;
	    numeric daydiff = 0;
	    numeric days = 28; // 4 weeks
	    
	    string weekday = strip(timestring("%A",timestamp()));
	    
	    if wDay = "Monday" then
	   dayStatic = 0;
	elseif wDay = "Tuesday" then
	    dayStatic = 1;
	elseif wDay = "Wednesday" then
	     dayStatic = 2;
	elseif wDay = "Thursday" then
	     dayStatic = 3;
	elseif wDay = "Friday" then
	      dayStatic = 4;
	elseif wDay = "Saturday" then 
	      dayStatic = 5;
	elseif wDay = "Sunday" then 
	      dayStatic = 6;
	endif;
	 
	    if weekday = "Monday" then
	   daydiff = 0 - dayStatic;
	elseif weekday = "Tuesday" then
	    daydiff = 1 - dayStatic;
	elseif weekday = "Wednesday" then
	     daydiff = 2 - dayStatic;
	elseif weekday = "Thursday" then
	     daydiff = 3 - dayStatic;
	elseif weekday = "Friday" then
	      daydiff = 4 - dayStatic;
	elseif weekday = "Saturday" then 
	      daydiff = 5 - dayStatic;
	elseif weekday = "Sunday" then 
	      daydiff = 6 - dayStatic;
	endif;
	
	    calcLast4WeekDay = strip(timestring("%A, %B %e",timestamp() -(days+daydiff)*3600*24));
	    
	end;

// Function to calculate date for the end of last four weeks
	function string calcEndLastWeekDay(string wDay)
	    numeric dayStatic = 0;
	    numeric daydiff = 0;
	    numeric days = 7; //1 week 
	    
	    string weekday = strip(timestring("%A",timestamp()));
	    
	    if wDay = "Monday" then
	   dayStatic = 0;
	elseif wDay = "Tuesday" then
	    dayStatic = 1;
	elseif wDay = "Wednesday" then
	     dayStatic = 2;
	elseif wDay = "Thursday" then
	     dayStatic = 3;
	elseif wDay = "Friday" then
	      dayStatic = 4;
	elseif wDay = "Saturday" then 
	      dayStatic = 5;
	elseif wDay = "Sunday" then 
	      dayStatic = 6;
	endif;
	 
	    if weekday = "Monday" then
	   daydiff = 0 - dayStatic;
	elseif weekday = "Tuesday" then
	    daydiff = 1 - dayStatic;
	elseif weekday = "Wednesday" then
	     daydiff = 2 - dayStatic;
	elseif weekday = "Thursday" then
	     daydiff = 3 - dayStatic;
	elseif weekday = "Friday" then
	      daydiff = 4 - dayStatic;
	elseif weekday = "Saturday" then 
	      daydiff = 5 - dayStatic;
	elseif weekday = "Sunday" then 
	      daydiff = 6 - dayStatic;
	endif;
	
	    calcEndLastWeekDay = strip(timestring("%A, %B %e",timestamp() -(days+daydiff)*3600*24));
	    
	end;


// End of Global Variables and Functions Definitions

// Start of Questionnaire Procedure 
{PROC GHDWNO//Temporarily disabled: Pachalo, 11 Dec, 2022

// Retrieve GHDWNO from menu program via pff file parameter (to be added at a latter release)
{
if sysparm("TO_GHDWNO") <> "" then
$ = tonumber(sysparm("TO_GHDWNO"));

// Make field protected so that it cannot be modified by
// interviewer
setproperty($, "Protected", "Yes");
endif;
}


preproc
setproperty($, "Protected", "Yes");
$ = 1;
}
{PROC GHHHNO //Temporarily disabled: Pachalo, 11 Dec, 2022

// Retrieve GHHHNO from menu program via pff file parameter (to be added at a latter release)
{
if sysparm("TO_GHHHNO") <> "" then
$ = tonumber(sysparm("TO_GHHHNO"));

// Make field protected so that it cannot be modified by
// interviewer
setproperty($, "Protected", "Yes");
endif;
}


preproc
setproperty($, "Protected", "Yes");
$ = 1;
}
{
PROC XGHUNID


preproc

if $ = "" then
$ = uuid();
endif;

setproperty($, "Protected", "Yes");
}





//PROC XDEM_BTH_DAY

{	This will work if household has day of birth.
if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) then
	XDEM_BTH_DAY = DEM_03(XHMPPNO);
endif;
}
PROC XDEM_REL

preproc

	loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO);
		XDEM_REL = DEM_02 (XHMPPNO);
		
		//noinput;

PROC XGHHHSIZE


preproc

// Skip entry. It will be calculated based on the XDEM_NAME roster
{
set behavior($) canenter(notappl) on (noconfirm);


postproc

if $ = notappl then
$ = 0;
endif;
}

PROC XGHHRPL

{
// Retrieve GHHRPL from menu program via pff file parameter (to be added at a latter release)
if sysparm("TO_GHHRPL") <> "" then
$ = tonumber(sysparm("TO_GHHRPL"));

// Make field protected so that it cannot be modified by
// interviewer
setproperty($, "Protected", "Yes");
endif;
}

// prefill for testing
preproc
$ = 1;


PROC XGHNELIGIBLE

preproc

// Skip entry. It will be calculated based on the DEM module
{
set behavior($) canenter(notappl) on (noconfirm);

postproc

if $ = notappl then
$ = 0;
endif;
}
PROC INDIVIDUALLFS_FF



PROC XIDS0_FORM



PROC XCLUSTER

preproc

	if sysparm("XCLUSTER") <> "" then
		$ = tonumber(sysparm("XCLUSTER"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;

PROC XREGION


	// Retrieve PROVINCE from menu program via pff file parameter (to be added at a latter release)
	{
	if sysparm("TO_PROVINCE") <> "" then
	$ = tonumber(sysparm("TO_PROVINCE"));

	// Make field protected so that it cannot be modified by
	// interviewer
	setproperty($, "Protected", "Yes");
	endif;
	}


preproc

	loadcase(CLUSTERS_DICT,XCLUSTER);
		XREGION = CREGION;
		XDISTRICT = CDISTRICT;
		XTA = CTA;
		XEA = CEA;
	setproperty($, "Protected", "Yes");


PROC XDISTRICT

// Retrieve DISTRICT from menu program via pff file parameter (to be added at a latter release)
{
if sysparm("TO_DISTRICT") <> "" then
$ = tonumber(sysparm("TO_DISTRICT"));

// Make field protected so that it cannot be modified by
// interviewer
}
setproperty($, "Protected", "Yes");




PROC XTA


setproperty($, "Protected", "Yes");
PROC XEA


setproperty($, "Protected", "Yes");
PROC XGHHHNO


setproperty($, "Protected", "Yes");
PROC XHMPPNO

preproc
	
	if sysparm("XHMPPNO") <> "" then
		$ = tonumber(sysparm("XHMPPNO"));
	setproperty($, "Protected", "Yes");
	endif;
PROC XGHVFDT

preproc

	// Do not overwrite the start date if modifying the case
	if visualvalue(XGHVFDT) = notappl then
		XGHVFDT = sysdate("YYYYMMDD");
		noinput;
	endif;

postproc

	// Verify the interview start date
	if $ > sysdate("YYYYMMDD") then
		errmsg("Please enter a valid value! The interview date cannot be in the future.");
		reenter;
	endif;

	// Set the Linux-format interview date
	interview_date_timestamp = DateDiff(19700101, XGHVFDT, "d")*86400;

	// Set week_end_date varaible to "yesterday" when (Today â 1) = week_end_date
	if timestring("%A", timestamp() - 86400) = nav_week_end_day and XGHVFDT = sysdate("YYYYMMDD") then
		last_week_end_date = "yesterday";
		nav_week_end_day_yesterday = "yesterday";
	else
		last_week_end_date ="last " + nav_week_end_day;
		nav_week_end_day_yesterday = nav_week_end_day;
	endif;


PROC XGHAREA

// prefill for testing
preproc
$ = 1;

PROC GHINTCODE

{
// Retrieve GHINTID from menu program via pff file parameter (to be added at a latter release)
if sysparm("TO_GHINTID") <> "" then
$ = tonumber(sysparm("TO_GHINTID"));

// Make field protected so that it cannot be modified by
// interviewer
setproperty($, "Protected", "Yes");
endif;
}


// prefill for testing
preproc
//$ = 0;


PROC XDEM_NAME


preproc

	loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO);
	
		XDEM_NAME =  DEM_NAME (XHMPPNO);
		noinput;

postproc

{
if $="" then
errmsg("This field cannot be blank. Please enter the interviewer name.");
reenter;
endif;
}
// Capitalise the name of the interviewer
MCV_INTERVIEWER_NAME = toupper(strip($));

// Capitalise the name of the agency
nav_agency = toupper(nav_agency);
PROC XLABOR_REC_FORM



PROC LBPPNO

preproc

	$ = XHMPPNO;
	
	//Copy some information from the household
{
	loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO);
		XDEM_SEX = DEM_01(XHMPPNO);
		XDEM_AGE = DEM_06(XHMPPNO);
		XDEM_REL = DEM_02(XHMPPNO);
}

postproc

// Reset these global flags to default value for each new individual
reset_GLO();
skip to RSP_START;



PROC RSP_START

preproc 

$ = 1;

noinput;
PROC RSP_AVAIL

///preproc ask if LBPPNO > 1;


PROC RSP_DIR

preproc ask if RSP_AVAIL = 1 {or LBPPNO=1};


postproc

	if $ = 1 then
		
		RSP_PPNO = LBPPNO;
		
		if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) and LBPPNO = HH_RESP_LN then
			XDEM_SEX 	   = DEM_01(XHMPPNO);
			XDEM_BTH_YEAR  = DEM_05(XHMPPNO);
			XDEM_BTH_MONTH = DEM_04(XHMPPNO);
			XDEM_AGE 	   = DEM_06(XHMPPNO);
			
			skip to RSP_END;
			
		endif;
		
		//skip to RSP_END;
		
	endif;

PROC RSP_PPNO

preproc
	ask if RSP_DIR = 2 or RSP_AVAIL = 2;
	
	if RSP_DIR = 1 then
		noinput;
	endif;

onfocus 

	valueset numeric hh_members;
	
	//Loop through already assigned households for a specific interviewer
	forcase HOUSEHOLDLFS_DICT where CLUSTER = XCLUSTER and GHHHNO = XGHHHNO do 
		do varying numeric ctr = 1 while ctr <= GHHHSIZE
			if HMPPNO(ctr) <> XHMPPNO and DEM_06(ctr) >= 12 then //Agree on age of respondent; what if age is unknown but an adult
				hh_members.add(DEM_NAME(ctr),HMPPNO(ctr));
			endif
		enddo;
	endfor;
	
	hh_members.add("NO PROXY",98); 					//Not implemented: To apply to those whose questionnaire cannot be filled by other members when they are away for long time
	hh_members.add("REFUSED",99); 			   		//Not implemented: To apply to those whose questionnaire cannot be filled 
	setvalueset($,hh_members);



postproc


		
		if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) and $ = HH_RESP_LN then
			XDEM_SEX 	   = DEM_01(XHMPPNO);
			XDEM_BTH_YEAR  = DEM_05(XHMPPNO);
			XDEM_BTH_MONTH = DEM_04(XHMPPNO);
			XDEM_AGE 	   = DEM_06(XHMPPNO);
			
			skip to RSP_END;
			
		endif;


	if RSP_PPNO in 98,99 then
		skip to INDIVEND
	endif;
PROC RSP_REL

preproc
	ask if (RSP_DIR=2);
{
preproc ask if LBPPNO > 1 and RSP_PPNO > 1 and (RSP_DIR=2 or RSP_AVAIL = 2);

}
PROC XDEM_SEX


postproc

	loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO);
	
		if XDEM_SEX <> DEM_01 (XHMPPNO) then
			if XDEM_SEX = 1 then
				errmsg("Confirm if %s is male",strip(XDEM_NAME))
					select("Yes, correct",continue,"Reenter",reenter);
			else
				errmsg("Confirm if %s is female",strip(XDEM_NAME))
					select("Yes, correct",continue,"Reenter",reenter);
			endif;
		endif;
		
		//noinput;

PROC XDEM_BTH_YEAR

preproc


postproc

	//Year should be consistent with age range of 0-120 years
	if $ > sysdate("YYYY") or $ < (sysdate("YYYY") - 120) then 
		errmsg("Invalid date");
		reenter;
	endif;
	
	if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) and XDEM_BTH_YEAR  <> DEM_05(XHMPPNO) then
		errmsg("Year of birth (%d) for %s different from HH's (%d)",$,XDEM_NAME,DEM_05(XHMPPNO))
			select("Reenter",reenter,"Yes, this is correct",continue);
		
		//skip to RSP_END;
			
	endif;
PROC XDEM_BTH_MONTH


preproc

{
	//If same respond in the household.
	if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) then
		XDEM_BTH_MONTH = DEM_04(XHMPPNO);
		noinput;
	endif;
}

postproc
{	
	if $ > sysdate("MM") then
		errmsg("Invalid month");
		reenter;
	endif;
}
PROC XDEM_AGE


preproc

{
	//If same respond in the household.
	if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) then
		XDEM_AGE = DEM_06(XHMPPNO);
		noinput;
	endif;
}

postproc

	if XDEM_AGE <> sysdate("YYYY") - XDEM_BTH_YEAR then
		errmsg("The entered age is inconsistent with the year and month provided..")
			select("No, reenter Year",XDEM_BTH_YEAR,
				   "No, reenter Month",XDEM_BTH_MONTH,
				   "Reenter age",reenter);
		//reenter;
		
	endif;
	
	if $ > 64 or $ < 15 then
		errmsg("Confirm that %s is %d years",XDEM_NAME,XDEM_AGE)
			select("No, reenter Year",XDEM_BTH_YEAR,
				   "No, reenter month",XDEM_BTH_MONTH,
				   "Reenter age",$,"Confirm",continue);
		
		savepartial();	   
		errmsg("Eligibility for %s has changed! Your supervisor MUST approve of this!",XDEM_NAME);
		skip to INDIVEND;
	endif;
PROC RSP_END

preproc $ = 1;

noinput;
PROC ATW_START

preproc $ = 1;

noinput;
PROC ATW_PAY

preproc 

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B1 <> notappl then 		
		$ = B1; 		//Work for pay		
		noinput; 
	endif;
		
	XDEM_REL = dem_relationship(); //Relationship to head of the household
	
	ask if XDEM_REL <> 13;
	
PROC ATW_PFT

preproc 

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B2 <> notappl  then		
		$ = B2; 		//Work for pay		
		noinput; 
	endif;
	

ask if ATW_PAY=2;

PROC ATW_FAM

preproc 


	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B3 <> notappl then 		
		$ = B3; 		//Work for pay		
		noinput; 
	endif;
	
ask if ATW_PFT=2;

PROC ATW_END

onfocus $ = 1;
noinput;

PROC ABS_START

preproc $ = 1;

noinput;
PROC ABS_JOB

preproc

// Reset GLO variables based on previous entries
reset_GLO();
set_GLO_ATW();


ask if GLO_EMP = 0;

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B4 <> notappl then 		
		$ = B4; 		//Work for pay		
		noinput; 
	endif;
PROC ABS_WHY

preproc ask if ABS_JOB=1;

PROC ABS_WHY_13_OTHER

preproc ask if ABS_WHY=13;

PROC ABS_SEA

preproc ask if ABS_WHY=2;

PROC ABS_DUR

preproc ask if ABS_WHY in 7,8,9,10,11,12,13;

PROC ABS_PAY

preproc ask if ABS_DUR in 2, 97;

PROC ABS_END

preproc $ = 1;

noinput;
PROC AGF_CHK

preproc

	
	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B6 <> "" then 		
		$ = tolower(B6); 		//Work for pay		
		noinput; 
	endif;

	set_GLO_ABS();	
	ask if GLO_PROV = 1;

postproc
	
	if pos("a",$) = 0 and pos("b",$) = 0 and pos("c",$) = 0 and pos("d",$) = 0 then
		errmsg("Select at least one option");
		reenter;
	endif;

PROC AGF_ANY

preproc

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B5 <> "" then 		
		$ = tolower(B5); 		//Work for pay		
		noinput; 
	endif;

	ask if GLO_EMP=0;

postproc
	
	if pos("a",$) = 0 and pos("b",$) = 0 and pos("c",$) = 0 and pos("d",$) = 0 then
		errmsg("Select at least one option");
		reenter;
	endif;

	if (pos("a",$) > 0 or pos("b",$) > 0 or pos("c",$) > 0) and pos("d",$) > 0 then
		errmsg("Invalid selection");
		reenter;
	endif;
PROC AGF_MKT
    
// Abel, Jones, Pachalo 4/01/2023 	
preproc

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B7 <> notappl then 		
		$ = B7; 		//Work for pay		
		noinput; 
	endif;

	ask if pos("A",AGF_CHK)>0 or 
		   pos("B",AGF_CHK)>0 or 
		   pos("C",AGF_CHK)>0 or 
		   pos("A",AGF_ANY)>0 or 
		   pos("B",AGF_ANY)>0 or 
		   pos("C",AGF_ANY)>0 
	
PROC AGF_HIS

preproc
	ask if AGF_MKT=5;
PROC AGF_HIR

preproc

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B8 <> notappl then 		
		$ = B8; 		//Work for pay		
		noinput; 
	endif;

	ask if (AGF_MKT in 3,4) or (AGF_HIS in 3,4);
PROC AGF_GDS

preproc 

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO) and B9 <> "" then 		
		$ = B9; 		//Work for pay		
		noinput; 
	endif;


	ask if AGF_HIR = 2;
PROC AGF_DYS

preproc

	if loadcase(CHILD_LABOUR_DICT,XCLUSTER,GHINTCODE,XGHHHNO,XHMPPNO)  and B11 <> notappl then 		
		$ = B11; 				
		noinput; 
	endif;

	ask if AGF_HIR = 2;
PROC AGF_HRS

preproc 
	ask if AGF_HIR = 2;
PROC X01

preproc


ask if GLO_EMP = 0;
PROC X02

preproc


ask if X01 = 1;
PROC X03

preproc


ask if X01 = 1;
PROC X04

preproc


ask if X01 = 1;
PROC MJJ_START

preproc 
	$ = 1;
	noinput;
PROC MJJ_MULT

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1 and ((GLO_MLT=0 and XDEM_REL <> 13) or GLO_MLT in 1,2,3 or XDEM_REL = 13);

PROC BLOCK_MJJ_OCC

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1;

PROC MJJ_OCC_TLE
// Ensure input
postproc NotAllowBlankOtherSpecify($);


PROC MJJ_OCC_MTD
// Ensure input
postproc NotAllowBlankOtherSpecify($);

PROC MJJ_EMP_REL

preproc

	// Reset global variables based on previous entries
	reset_GLO();
	set_GLO_ATW();
	set_GLO_ABS();
	set_GLO_AGF();

	ask if GLO_EMP=1;

onfocus

	// Fill in dynamic valueset for 1st and 2nd values
	numeric numT = 5;
	do numeric i = 1 while i <= numT
		vsCodes(i) = i;
		vsLabels(i) = getlabel(MJJ_EMP_REL_EN,i);
		if i = 2 then
			vsLabels(i) = "In " + get_your_his_her() + " own business activity";
		elseif i = 1 then
			vsLabels(i) = "As an " + nav_employee;
		endif;
	enddo;

	vsCodes(numT + 1) = notappl;

	setvalueset($,vsCodes,vsLabels);


PROC MJJ_CFW_CHK

preproc ask if MJJ_EMP_REL=3;

onfocus

	// Fill in dynamic valueset for 1st and 2nd values
	numeric numT = 4;
	do numeric i = 1 while i <= numT
		vsCodes(i) = i;
		vsLabels(i) = getlabel(MJJ_CFW_CHK_EN,i);
		if i = 1 then
			vsLabels(i) = get_c_you_name();
		elseif i = 2 then
			vsLabels(i) = get_c_you_name() +" together with others";
		endif;
	enddo;

	vsCodes(numT + 1) = notappl;

	setvalueset($,vsCodes,vsLabels);


PROC MJJ_HIRES

preproc ask if MJJ_EMP_REL=2 or MJJ_CFW_CHK in 1,2;

PROC MJJ_REM_TYP

preproc ask if MJJ_EMP_REL in 1,4,5 OR (MJJ_EMP_REL=3 and MJJ_CFW_CHK in 3,4);


onfocus
	if getlanguage() = "EN" then
		setvalueset(MJJ_REM_TYP,MJJ_REM_TYP_EN);
	elseif getlanguage() = "CH" then
		setvalueset(MJJ_REM_TYP,MJJ_REM_TYP_CH);
	endif;

postproc

	// Validate if (i) NOT PAID is selected other options should not be selected
	if pos("i",$) > 0 and (pos("a",$) > 0 or pos("b",$) > 0 or pos("c",$) > 0 or pos("d",$) > 0 or pos("e",$) > 0 or pos("f",$) > 0 or pos("g",$) > 0 or pos("h",$) > 0) then
		errmsg("Please enter a valid value! NOT PAID cannot be marked together with other options.");
		reenter;
	endif;

NotAllowBlankOtherSpecify($);


PROC MJJ_REM_TYP_6_OTHER

preproc ask if (MJJ_EMP_REL in 1,4,5 OR (MJJ_EMP_REL=3 and MJJ_CFW_CHK in 3,4)) and pos("h",MJJ_REM_TYP)>0;

PROC D06A

preproc
	ask if poschar("abcdeh",MJJ_REM_TYP) > 0;
PROC D06B

preproc
	ask if poschar("abcdeh",MJJ_REM_TYP) > 0;
PROC MJJ_END

preproc $ = 1;






PROC MJD_WHO_PAYS

preproc 
	ask if MJJ_EMP_REL in 1,4 or ((MJJ_EMP_REL in 3,5) and (pos("A", MJJ_REM_TYP)>0 or 
															pos("B", MJJ_REM_TYP)>0 or  
															pos("C", MJJ_REM_TYP)>0 or 
															pos("E", MJJ_REM_TYP)>0 or 
															pos("H", MJJ_REM_TYP)>0));
PROC MJD_BOSS_TAX

preproc
	
		mjd_boss_tax_a = 0;
		mjd_boss_tax_b = 0;
		
		if (MJJ_EMP_REL in 1,4) and (pos("a",MJJ_REM_TYP) = 0 ) and 
		   (pos("b", MJJ_REM_TYP) > 0 or
		    pos("c", MJJ_REM_TYP) > 0 or
			pos("e", MJJ_REM_TYP) > 0 or
			pos("h", MJJ_REM_TYP) > 0) then
			
			mjd_boss_tax_a = 1;
			
		endif;
		
		if (MJJ_EMP_REL = 3 and (MJJ_CFW_CHK in 3,4)) and pos("a",MJJ_REM_TYP)= 0 and 
														 (pos("b",MJJ_REM_TYP) > 0 or
														  pos("c",MJJ_REM_TYP) > 0 or														 
														  pos("e",MJJ_REM_TYP) > 0 or 
														  pos("h",MJJ_REM_TYP) > 0 ) then
			
			mjd_boss_tax_b = 1;
			
		endif;
		
		//errmsg("A: %d,  B: %d",mjd_boss_tax_a,mjd_boss_tax_b);
		
		ask if mjd_boss_tax_a = 1 or mjd_boss_tax_b = 1;

PROC MJU_START

preproc $ = 1;

PROC MJU_INS

preproc ask if MJJ_EMP_REL in 1,4,5;

PROC MJU_REF

preproc ask if (MJJ_EMP_REL=3) or (MJJ_EMP_REL in 1,4,5 and MJU_INS <> 4) or MJJ_EMP_REL=2;



PROC MJU_NAM

preproc ask if MJU_REF=1 and MJJ_EMP_REL in 1,2,3,4,5;

postproc NotAllowBlankOtherSpecify($);


PROC MJU_MAC

preproc ask if MJJ_EMP_REL=3 or (MJJ_EMP_REL in 1,4,5 and MJU_INS <> 4) or MJJ_EMP_REL=2;

postproc NotAllowBlankOtherSpecify($);

PROC MJU_SIZ

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1 and ((MJJ_EMP_REL in 1,4,5 and MJU_INS <> 4) or MJJ_EMP_REL in  2,3 or MJU_INS=4);

PROC MJU_PLC

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1;

onfocus
// Fill in dynamic valueset for 1st value
numeric numT = 9;
do numeric i = 1 while i <= numT
vsCodes(i) = i;
vsLabels(i) = getlabel(MJU_PLC,i);
if i = 1 then
vsLabels(i) = "AT "+toupper(get_your_names())+ " OWN HOME";
endif;
enddo;

vsCodes(numT + 1) = notappl;

setvalueset($,vsCodes,vsLabels);


PROC MJU_END

preproc $ = 1;

















PROC MJT_SYR

preproc
	
	ask if MJJ_EMP_REL in 1:5;
PROC MJT_SMO

preproc
	ask if GLO_EMP=1 & MJT_SYR <> 9997;
PROC MJL_CORP

preproc
	ask if MJJ_EMP_REL = 2 or 
	((MJJ_EMP_REL in 1,4,5) and (MJU_INS in 2,3));
	
PROC MIS_REGI

preproc
	ask if (MJJ_EMP_REL = 2 and MJL_CORP in 2,97) or 
		   ((MJJ_EMP_REL in 1,4,5) and (MJU_INS in 2,3) and (MJL_CORP in 2,97)) or 
		   ((MJJ_EMP_REL = 3) and (MJL_CORP in 2,97));
PROC MIS_BOOK

preproc
	ask if MIS_REGI in 2,97;
PROC MJI_PRICE_SELF

preproc
	ask if ((MJJ_EMP_REL=2) and (MJJ_HIRES = 2) and (MJL_CORP in 2,97)) or 
		   ((MJJ_EMP_REL=3 and MJJ_CFW_CHK in 1,2) and (MJJ_HIRES = 2) and (MJL_CORP in 2,97));
PROC MJI_PRICE_OTH

preproc
	ask if (MJJ_EMP_REL = 2) and (MJJ_HIRES = 2) and (MJL_CORP in 2,97) and (MJI_PRICE_SELF = 2) or
		   ((MJJ_EMP_REL = 3 and (MJJ_CFW_CHK in 1,2)) and (MJJ_HIRES = 2) and (MJL_CORP in 2,97) and (MJI_PRICE_SELF=2));
	
PROC MJC_START

preproc $ = 1;

PROC MJC_CONTRA

preproc ask if (MJJ_EMP_REL in 1,4) or
				(MJJ_EMP_REL in 3,5 and
				((MJJ_EMP_REL in 1,4,5 or 
				(MJJ_EMP_REL=3 and 
				MJJ_CFW_CHK in 3,4)) and
				(pos("a",MJJ_REM_TYP)>0 or 
				pos("b",MJJ_REM_TYP)>0 or 
				pos("c",MJJ_REM_TYP)>0 or
				pos("e",MJJ_REM_TYP)>0 or 
				pos("f",MJJ_REM_TYP)>0 or 
				pos("g",MJJ_REM_TYP)>0 or 
				pos("h",MJJ_REM_TYP)>0)));

PROC MJC_CONOP

preproc ask if MJC_CONTRA in 1,2;

PROC MJC_TEMPDUR

preproc ask if MJC_CONOP in 1,2;

PROC MJC_END

preproc $ = 1;














PROC MCD_TEMPRES

preproc
	ask if MJC_CONOP in 1,2;

postproc
	if poschar("ABCD",$) > 0 and pos("E",$) > 0 then
		errmsg("Invalid selection");
		reenter;
	endif;
PROC MCD_PERM

preproc
	ask if (MJC_CONTRA=1) and (MJC_CONOP = 1) and 
		   (pos("b",MCD_TEMPRES) > 0 or
			pos("c",MCD_TEMPRES) > 0 or
			pos("d",MCD_TEMPRES) > 0 or
			pos("e",MCD_TEMPRES) > 0 );
PROC MCD_TASKSE

preproc

	ask if MJC_CONTRA = 9;
PROC MCD_CONTHRS

preproc
	ask if MJC_CONTRA in 1,2
PROC MCD_CONTHRS_NUM

preproc
	ask if MCD_CONTHRS = 1;
PROC MCD_CONMIN


preproc
	ask if (MJC_CONTRA in 1,2) & (MCD_CONTHRS = 2);
PROC MIE_SOCPRO

preproc
	ask if MJJ_EMP_REL in 1,4 or
		   ((MJJ_EMP_REL in 3,5) and 
		   (pos("a",MJJ_REM_TYP) > 0 or
		    pos("b",MJJ_REM_TYP) > 0 or
			pos("c",MJJ_REM_TYP) > 0 or
			pos("f",MJJ_REM_TYP) > 0 or
			pos("g",MJJ_REM_TYP) > 0 or
			pos("h",MJJ_REM_TYP) > 0));
PROC MIE_PVACLV

preproc
	ask if (MJJ_EMP_REL in 1,4) or ((MJJ_EMP_REL in 3,5) and 
		   (pos("a",MJJ_REM_TYP) > 0 or
			pos("b",MJJ_REM_TYP) > 0 or 
			pos("c",MJJ_REM_TYP) > 0 or 
			pos("e",MJJ_REM_TYP) > 0 or 
			pos("f",MJJ_REM_TYP) > 0 or 
			pos("g",MJJ_REM_TYP) > 0 or 
			pos("h",MJJ_REM_TYP) > 0 ));
PROC MIE_PSCKLV


preproc
	ask if (MJJ_EMP_REL in 1,4) or ((MJJ_EMP_REL in 3,5) and 
		   (pos("a",MJJ_REM_TYP) > 0 or
			pos("b",MJJ_REM_TYP) > 0 or 
			pos("c",MJJ_REM_TYP) > 0 or 
			pos("e",MJJ_REM_TYP) > 0 or 
			pos("f",MJJ_REM_TYP) > 0 or 
			pos("g",MJJ_REM_TYP) > 0 or 
			pos("h",MJJ_REM_TYP) > 0 ));
PROC SJJ_START

preproc $ = 1;

ask if MJJ_MULT=2;


PROC BLOCK_SJJ_OCC

preproc ask if MJJ_MULT=2;

PROC SJJ_OCC_TLE

postproc NotAllowBlankOtherSpecify($);

PROC SJJ_OCC_MTD

postproc NotAllowBlankOtherSpecify($);

PROC P25_OCCUPATION_LEVEL_1

preproc

	savepartial();

	ask if MJJ_MULT=2;

	// if entering a new occupation and the interviewer previously viewed all occupations, start on that screen
	if visualvalue(P25_OCCUPATION_LEVEL_1) = notappl and loadsetting(ViewAllOccupationsSettingKey) = "1" then
		P25_OCCUPATION_LEVEL_1 = 10;
		noinput;
	endif;

postproc

	if P25_OCCUPATION_LEVEL_1 = 10 then // view all occupations
		savesetting(ViewAllOccupationsSettingKey,"1");
		skip to P25_OCCUPATION_LEVEL_4;

	else
		savesetting(ViewAllOccupationsSettingKey,"0");

		if P25_OCCUPATION_LEVEL_1 = 0 then // armed services occupations don't have sub major or minor groups
			P25_OCCUPATION_LEVEL_2 = 0;
			P25_OCCUPATION_LEVEL_3 = 0;
			advance to P25_OCCUPATION_LEVEL_4;
		endif;

	endif;


PROC P25_OCCUPATION_LEVEL_2


preproc

	ask if P25_OCCUPATION_LEVEL_1 <> notappl and MJJ_MULT=2;

onfocus

	StartVS();

	numeric firstOccupation = P25_OCCUPATION_LEVEL_1 * 10;
	numeric lastOccupation = firstOccupation + 9;

	do numeric ctr = firstOccupation while ctr <= lastOccupation

		if invalueset(ctr,P25_OCCUPATION_LEVEL_2_VS1) then
			AddNumericVS(ctr,getlabel(P25_OCCUPATION_LEVEL_2_VS1,ctr));
		endif;

	enddo;

	EndVS();

	setvalueset(P25_OCCUPATION_LEVEL_2,vsCodes,vsLabels);

	// this field does not need to be filled for armed services occupations
	if P25_OCCUPATION_LEVEL_1 = 0 then
		setproperty(P25_OCCUPATION_LEVEL_2,"Protected","Yes");
	else
		setproperty(P25_OCCUPATION_LEVEL_2,"Protected","No");
	endif;


PROC P25_OCCUPATION_LEVEL_3


preproc

	ask if P25_OCCUPATION_LEVEL_1 <> notappl and MJJ_MULT=2;

onfocus

	StartVS();

	numeric firstOccupation = P25_OCCUPATION_LEVEL_2 * 10;
	numeric lastOccupation = firstOccupation + 9;

	do numeric ctr = firstOccupation while ctr <= lastOccupation

		if invalueset(ctr,P25_OCCUPATION_LEVEL_3_VS1) then
			AddNumericVS(ctr,getlabel(P25_OCCUPATION_LEVEL_3_VS1,ctr));
		endif;

	enddo;

	EndVS();

	setvalueset(P25_OCCUPATION_LEVEL_3,vsCodes,vsLabels);

	// this field does not need to be filled for armed services occupations
	if P25_OCCUPATION_LEVEL_1 = 0 then
		setproperty(P25_OCCUPATION_LEVEL_3,"Protected","Yes");
	else
		setproperty(P25_OCCUPATION_LEVEL_3,"Protected","No");
	endif;


PROC P25_OCCUPATION_LEVEL_4


preproc

	ask if P25_OCCUPATION_LEVEL_1 <> notappl and P05_AGE >= 10;

onfocus

	if P25_OCCUPATION_LEVEL_1 = 10 then // view all occupations
		setvalueset(P25_OCCUPATION_LEVEL_4,P25_OCCUPATION_LEVEL_4_VS1);

	else
		StartVS();

		numeric firstOccupation = P25_OCCUPATION_LEVEL_3 * 10;
		numeric lastOccupation = firstOccupation + 9;

		do numeric ctr = firstOccupation while ctr <= lastOccupation

			if invalueset(ctr,P25_OCCUPATION_LEVEL_4_VS1) then
				AddNumericVS(ctr,getlabel(P25_OCCUPATION_LEVEL_4_VS1,ctr));
			endif;

		enddo;

		EndVS();

		setvalueset(P25_OCCUPATION_LEVEL_4,vsCodes,vsLabels);

	endif;

postproc

	if P25_OCCUPATION_LEVEL_4 = -999 then
		reenter P25_OCCUPATION_LEVEL_1;
	endif;


PROC P26_OCCUPATION_STATUS


preproc

	ask if P05_AGE >= 10;


PROC SJJ_IND_MAC

preproc ask if MJJ_MULT=2;

postproc NotAllowBlankOtherSpecify($);

PROC SJJ_EMP_REL

preproc ask if MJJ_MULT=2;

onfocus

	// Fill in dynamic valueset for 1st and 2nd values
	numeric numT = 5;
	if getlanguage() = 'EN' then
		do numeric i = 1 while i <= numT
			vsCodes(i) = i;
			vsLabels(i) = getlabel(MJJ_EMP_REL_EN,i);
			if i = 2 then
				vsLabels(i) = " In "+get_your_his_her()+" own business activity";
			elseif i = 1 then
				vsLabels(i) = " As an "+nav_employee;
			endif;
		enddo;
		
		vsCodes(numT + 1) = notappl;

		setvalueset($,vsCodes,vsLabels);

	elseif getlanguage() = 'CH' then
		setvalueset($,SJJ_EMP_REL_CH);
	endif;



PROC SJJ_HIRES

preproc ask if SJJ_EMP_REL=2;

PROC SJJ_END

preproc $ = 1;









PROC SJD_REM_TYP

preproc
	ask if SJJ_EMP_REL in 1,3,4,5;
PROC N01A

preproc
	ask if poschar("abcdeh",SJD_REM_TYP) > 0;
PROC N01B

preproc
	ask if poschar("abcdeh",SJD_REM_TYP) > 0;
PROC SJD_BOSS_TAX

preproc
	ask if (SJJ_EMP_REL in 1, 4) and (pos("a",SJD_REM_TYP) = 0 or pos("i",SJD_REM_TYP) = 0);
PROC SJD_PRICE_SELF

preproc
	ASK IF SJJ_HIRES = 2;
PROC SJD_PRICE_OTH

preproc
	ask if SJD_PRICE_SELF = 2;
PROC WKT_START

preproc $ = 1;

noinput;
PROC WKT_MJ_USHRS

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1;

postproc
// Validate entry
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person works more than 120 hours per week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_MJ_USDAY

preproc ask if WKT_MJ_USHRS=997;

PROC WKT_MJ_USHRDY

preproc ask if WKT_MJ_USHRS=997;

postproc
// Validate entry
if $ > 18 then
warning ("Warning: Please confirm person works more than 18 hours per day.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_MJ_ABS

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1 and (ABS_JOB<>1 or ABS_JOB=notappl);


PROC WKT_MJ_OVT

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1 and (ABS_JOB<>1 or ABS_JOB=notappl);


PROC WKT_MJ_OVHRS

preproc ask if WKT_MJ_OVT=1;

PROC WKT_MJ_SAMEHRS

preproc ask if WKT_MJ_ABS=2 and WKT_MJ_OVT=2;

PROC WKT_ABS_CHK1

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP = 1 and ABS_JOB = 1;

PROC WKT_MJ_ACTHRS

preproc ask if WKT_MJ_SAMEHRS=2 or WKT_ABS_CHK1=1 or WKT_MJ_ABS=1 or WKT_MJ_OVT=1;

postproc

// Check and confirm person worked more than 120 hours last week:
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person worked more than 120 hours last week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;


// Check and confirm person worked more than 120 hours last week:
if (WKT_ABS_CHK1 = 1 or WKT_ABS_CHK1 = notappl) and $=0 then
warning("Warning:  Please confirm that person did not work at all last week in his/her main job.")
select("Confirm Entry", continue, "Re-enter", $);
endif;


// Check and confirm reported outlieres in the hours worked last week:
if WKT_MJ_ABS=1 OR WKT_MJ_OVT=1 then
if (WKT_MJ_USHRS <> 997 AND WKT_MJ_ABS=1 AND WKT_MJ_OVT=2) AND (WKT_MJ_ACTHRS >= WKT_MJ_USHRS)  then
warning ("Warning: Actual hours are higher than usual but person was absent, please verify value.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

if (WKT_MJ_USHRS <> 997 AND WKT_MJ_ABS=2 AND WKT_MJ_OVT=1) AND (WKT_MJ_ACTHRS < WKT_MJ_USHRS)   then
warning ("Warning: Actual hours are lower than usual but person worked extra hours, please verify  value.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

if (WKT_MJ_USHRS = 997 AND WKT_MJ_ABS=1 AND WKT_MJ_OVT=2) AND (WKT_MJ_ACTHRS > (WKT_MJ_USDAY * WKT_MJ_USHRDY))  then
warning ("Warning: Actual hours are higher than usual but person was absent, please verify  value.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

if (WKT_MJ_USHRS = 997 AND WKT_MJ_ABS=2 AND WKT_MJ_OVT=1 ) AND (WKT_MJ_ACTHRS < (WKT_MJ_USDAY * WKT_MJ_USHRDY)) then
warning ("Warning: Actual hours are lower than usual but person worked extra hours, please verify  value.")
select("Confirm Entry", continue, "Re-enter", $);
endif;
endif;





PROC WKT_NUMJBS

preproc ask if MJJ_MULT=2;

PROC WKT_SJ_USHRS

preproc ask if WKT_NUMJBS in 2,3;

postproc
// Validate entry
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person works more than 120 hours per week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_SJ_SAMEHRS

preproc ask if WKT_SJ_USHRS <> notappl and WKT_SJ_USHRS <> 997;

PROC WKT_SJ_ACTHRS

preproc ask if WKT_SJ_SAMEHRS=2 or WKT_SJ_USHRS=997;

postproc
// Validate entry
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person worked more than 120 hours last week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_OJ_USHRS

preproc ask if WKT_NUMJBS=3;

postproc
// Validate entry
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person works more than 120 hours per week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;




PROC WKT_OJ_SAMEHRS

preproc ask if WKT_OJ_USHRS<>997 and WKT_OJ_USHRS<>notappl;

PROC WKT_OJ_ACTHRS

preproc ask if WKT_OJ_SAMEHRS=2 or WKT_OJ_USHRS=997;

postproc
// Validate entry
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person worked more than 120 hours last week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_USHRSTOT

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1;

// Set variables to 0 for persons without 2nd of other jobs
numeric WKT_SJ_USHRS_V;

if visualvalue (WKT_SJ_USHRS) = notappl then
WKT_SJ_USHRS_V = 0;
else WKT_SJ_USHRS_V = WKT_SJ_USHRS;
endif;

numeric WKT_OJ_USHRS_V;

if visualvalue(WKT_OJ_USHRS) = notappl then
WKT_OJ_USHRS_V = 0;
else WKT_OJ_USHRS_V = WKT_OJ_USHRS;
endif;

// Compute WKT_USHRSTOT
if WKT_MJ_USHRS <> 997 and WKT_SJ_USHRS <> 997 and WKT_OJ_USHRS <> 997 then
WKT_USHRSTOT = WKT_MJ_USHRS + WKT_SJ_USHRS_V + WKT_OJ_USHRS_V;
elseif WKT_MJ_USHRS = 997 and WKT_SJ_USHRS <> 997 and WKT_OJ_USHRS <> 997 then
WKT_USHRSTOT = (WKT_MJ_USDAY * WKT_MJ_USHRDY) + (WKT_SJ_USHRS_V) + (WKT_OJ_USHRS_V);
elseif WKT_SJ_USHRS = 997 or WKT_OJ_USHRS = 997 then
WKT_USHRSTOT=997;
endif;



PROC WKT_ACHRSTOT

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1;


// Set variables to 0 for persons without 2nd of other jobs
numeric WKT_SJ_USHRS_V;

if WKT_SJ_USHRS = notappl then
WKT_SJ_USHRS_V = 0;
else WKT_SJ_USHRS_V = WKT_SJ_USHRS;
endif;

numeric WKT_OJ_USHRS_V;

if WKT_OJ_USHRS = notappl then
WKT_OJ_USHRS_V = 0;
else WKT_OJ_USHRS_V = WKT_OJ_USHRS;
endif;

numeric WKT_SJ_ACTHRS_V;

if WKT_SJ_ACTHRS = notappl then
WKT_SJ_ACTHRS_V = 0;
else WKT_SJ_ACTHRS_V = WKT_SJ_ACTHRS;
endif;

numeric WKT_OJ_ACTHRS_V;

if WKT_OJ_ACTHRS = notappl then
WKT_OJ_ACTHRS_V = 0;
else WKT_OJ_ACTHRS_V = WKT_OJ_ACTHRS;
endif;

// Compute WKT_ACHRSTOT

numeric WKT_ACHRS1J;

IF WKT_MJ_USHRS <> 997 and WKT_MJ_SAMEHRS=1 then
WKT_ACHRS1J = WKT_MJ_USHRS;
ElseIF WKT_MJ_USHRS = 997 and WKT_MJ_SAMEHRS=1 then
WKT_ACHRS1J = WKT_MJ_USDAY * WKT_MJ_USHRDY;
ElseIF WKT_MJ_SAMEHRS=2 or WKT_ABS_CHK1 = 1 then
WKT_ACHRS1J = WKT_MJ_ACTHRS;
ElseIF WKT_MJ_ABS=1 OR WKT_MJ_OVT=1 then
WKT_ACHRS1J = WKT_MJ_ACTHRS;
endif;

numeric WKT_ACHRS2J;

IF WKT_SJ_SAMEHRS=1 and WKT_SJ_USHRS <> 997 then
WKT_ACHRS2J = WKT_SJ_USHRS_V;
ElseIF WKT_SJ_SAMEHRS = 2 OR WKT_SJ_USHRS = 997 then
WKT_ACHRS2J = WKT_SJ_ACTHRS_V;
endif;

numeric WKT_ACHRS3J;

IF WKT_OJ_SAMEHRS=1 and WKT_OJ_USHRS <> 997 then
WKT_ACHRS3J = WKT_OJ_USHRS_V;
elseIF WKT_OJ_SAMEHRS=2 OR WKT_OJ_USHRS = 997 then
WKT_ACHRS3J=WKT_OJ_ACTHRS_V;
endif;

IF WKT_ACHRS1J <> 997 and WKT_ACHRS2J <> 997 and WKT_ACHRS3J <> 997 then
WKT_ACHRSTOT=WKT_ACHRS1J + WKT_ACHRS2J + WKT_ACHRS3J;
elseIF WKT_ACHRS1J = 997 OR WKT_ACHRS2J = 997 OR WKT_ACHRS3J = 997 then
WKT_ACHRSTOT= 997;
endif;

PROC WKT_USHRSTOT_CHK

preproc ask if WKT_NUMJBS in 2,3 and WKT_USHRSTOT <> 997 and WKT_USHRSTOT <> notappl;

PROC WKT_USHRSTOT1

preproc

// Pre-fill with WKT_USHRSTOT value for cases where WKT_ USHRSTOT _CHK=1 OR MJJ_MULT=1 OR WKT_NUMJBS=1
if WKT_USHRSTOT_CHK=1 OR MJJ_MULT=1 OR WKT_NUMJBS=1  then
$=WKT_USHRSTOT;
noinput;
else ask if WKT_USHRSTOT_CHK=2 or WKT_USHRSTOT=997;
endif;

postproc

// Validate the person works more than 120 hours per week
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person works more than 120 hours per week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_ACHRSTOT_CHK

preproc ask if WKT_NUMJBS in 2,3 and WKT_ACHRSTOT <> 997 and WKT_ACHRSTOT <> notappl;

PROC WKT_ACHRSTOT1

preproc ask if WKT_ACHRSTOT_CHK=2 or WKT_ACHRSTOT = 997;

postproc

// Validate entry
if $ > 120 and $ <> 997  then
warning ("Warning: Please confirm person worked more than 120 hours last week.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_SRH_OJB

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=1;


PROC WKT_WNT_MRH

// Ask if it meets the minimum threshold, which may be customized to the national context (but not below 30 hours)
preproc ask if WKT_USHRSTOT1 < nav_week_working_hours;

PROC WKT_AVL_MRH

preproc ask if WKT_WNT_MRH=1;

PROC WKT_NUM_MRH

preproc ask if WKT_AVL_MRH=1;

postproc
//Validate entry
if (WKT_USHRSTOT1-$) > 126 and $ <> 997  then
warning ("Warning: Total work hours will be too high (18 hours per day), please confirm this is correct.")
select("Confirm Entry", continue, "Re-enter", $);
endif;

PROC WKT_END

preproc $ = 1;
	noinput;






PROC WKI_INAD

preproc
	ask if GLO_EMP=1;
PROC WKI_INAD_RES

preproc
	ask if WKI_INAD = 1; 
PROC SRH_START

preproc $ = 1;

noinput;

PROC SRH_JOB

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if GLO_EMP=0 and GLO_OPF in 0,1 and (ABS_WHY<>1 or ABS_JOB=2);

PROC SRH_BUS

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if SRH_JOB=2 and (GLO_EMP=0 and GLO_OPF in 0,1);

PROC SRH_MTD

preproc ask if SRH_JOB=1 or SRH_BUS=1;

onfocus
// Fill in dynamic valueset for 5th variable
numeric numT = 14;
do numeric i = 1 while i <= numT
vsCodes(i) = i;
vsLabels(i) = getlabel(SRH_MTD_EN,i);
if i = 5 then
vsLabels(i) = " REGISTER WITH "+nav_employment_center;
endif;
enddo;

vsCodes(numT + 1) = notappl;

setvalueset($,vsCodes,vsLabels);

PROC SRH_MTD_14_OTHER

preproc ask if SRH_MTD=14;

PROC SRH_ACT

preproc ask if SRH_MTD=3;


PROC SRH_OTH

preproc ask if SRH_ACT=1;

// Fill in a dynamic valueset with option 3 missing
numeric numT = 2;
do numeric i = 1 while i <= numT
vsCodes(i) = i;
vsLabels(i) = getlabel(SRH_OTH_EN,i);
enddo;

numT = 13;
do numeric i = 3 while i <= numT
vsCodes(i) = i+1;
vsLabels(i) = getlabel(SRH_OTH_EN,i+1);
if i = 4 then
vsLabels(i) = "REGISTER WITH "+nav_employment_center;
endif;
enddo;

vsCodes(numT + 1) = notappl;

setvalueset($,vsCodes,vsLabels);

PROC SRH_OTH_14_OTHER

preproc ask if SRH_OTH=14;

PROC SRH_DUR

preproc ask if SRH_JOB=1 or SRH_BUS=1;

PROC SRH_YER

preproc ask if SRH_BUS=2;


PROC SRH_DES

preproc ask if SRH_BUS=2;

PROC SRH_DWY

preproc ask if SRH_DES =1;

PROC SRH_DWY_13_OTHER

preproc ask if SRH_DWY=13;

PROC SRH_FTR

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if (GLO_EMP=0 and ABS_WHY=01) OR SRH_DWY=04;

PROC SRH_FAN

preproc

// Reset global variables based on previous entries
reset_GLO();
set_GLO_ATW();
set_GLO_ABS();
set_GLO_AGF();

ask if SRH_DWY=4 or (GLO_EMP=0 and ABS_WHY=1);

PROC SRH_AVN

preproc ask if SRH_JOB=1 or SRH_BUS=1 or (SRH_DES=1 and SRH_DWY<>4);

PROC SRH_AVL

preproc ask if SRH_FAN=2 or SRH_AVN=2;

PROC SRH_NAR

preproc ask if SRH_AVL=2;

PROC SRH_MAC

preproc ask if SRH_DES =2;

PROC SRH_MAC_8_OTHER

preproc ask if SRH_MAC=8;

PROC SRH_END

preproc $ = 1;



PROC ELG_DIF

preproc
	
	if loadcase(HOUSEHOLDLFS_DICT,XCLUSTER,GHINTCODE,XGHHHNO) then
		if DEM_21(XHMPPNO) in 3,4 or DEM_22(XHMPPNO) in 3,4 or DEM_23(XHMPPNO) in 3,4 or DEM_24(XHMPPNO) in 3,4 or DEM_25(XHMPPNO) in 3,4 or DEM_26(XHMPPNO) in 3,4 then
			ELG_DIF = 1;
			noinput;
		else
			ELG_DIF = 2;
			
			skip to OPC_INTRO;
			
		endif;
	endif;
	
	
postproc

PROC ELG_EMP
	
preproc

		if GLO_EMP =  1 then
			$ = 1;
		else
			$ = 2;
		endif;

		noinput;
{		
		ask if GLO_EMP <> 1;	
	
		{
		if GLO_EMP =  1 then
			ELG_EMP = 1;
			skip to WPA_1;
		else
			ELG_EMP = 2;
			skip to ELG_EMP;
		endif;
		}
}
PROC EBR_1


preproc
	ask if ELG_DIF = 1 & ELG_EMP = 2;
	
postproc
	
	if poschar("abcdefgh",$) = 0 then
		errmsg("Select an option");
		reenter;
	endif;

PROC EBR_2


preproc
	ask if ELG_DIF = 1 & ELG_EMP = 2;


//skip to ATT_1;
PROC WPA_1

preproc
	ask if ELG_DIF = 1 & ELG_EMP = 1;

PROC WPA_2

preproc
	ask if ELG_DIF = 1 & ELG_EMP = 1;

PROC ATT_1

preproc
	ask if ELG_DIF = 1 and ELG_EMP in 1,2
PROC ATT_2

preproc

	ask if ELG_DIF = 1 and ELG_EMP in 1,2
PROC SPR_1


preproc
	ask if ELG_DIF = 1 and ELG_EMP in 1,2
PROC SPR_2

preproc
	ask if ELG_DIF = 1 and ELG_EMP in 1,2
PROC SPR_3

preproc
	ask if ELG_DIF = 1 and ELG_EMP in 1,2
PROC OPC_INTRO

preproc
	//ask if (GLO_WAP=1 & GLO_OPF=0);
	ask if GLO_OPF = 0;
PROC OPC_HCROP

preproc
	//ask if (GLO_WAP=1 & GLO_OPF=0);
	ask if GLO_OPF = 0;
PROC OPC_HPROD

preproc
	ask if OPC_HCROP = 1;
PROC OPC_HDAY

preproc
	ask if OPC_HCROP = 1;
PROC OPC_HHRS

preproc
	ask if OPC_HCROP = 1;
PROC OPF_HFOOD

preproc
	// ask if (GLO_WAP=1 & GLO_OPF in 0,1);
	ask if GLO_OPF in 0,1;


onfocus

	valueset string opf_hfood_vs;

	if  GLO_OPF = 0 then
		opf_hfood_vs.add("Raise or tend farm animals such as [sheep, goats, chicken…]","a");
		opf_hfood_vs.add("Go fishing or collecting shellfish","b");
		opf_hfood_vs.add("Gather wild food such as [mushrooms, berries, herbs...]","c");
		opf_hfood_vs.add("Go hunting for [bush meat…]","d");
		opf_hfood_vs.add("Prepare preserved food or drinks for storage such as [flour, dried fish, butter, cheese,…]","e");
		opf_hfood_vs.add("NONE OF THE ABOVE","f");

	else
		
		opf_hfood_vs.add("Gather wild food such as [mushrooms, berries, herbs...]","c");
		opf_hfood_vs.add("Go hunting for [bush meat…]","d");
		opf_hfood_vs.add("Prepare preserved food or drinks for storage such as [flour, dried fish, butter, cheese, …]","e");
		opf_hfood_vs.add("NONE OF THE ABOVE","f");

	endif;


	setvalueset($,opf_hfood_vs);


postproc
	
		
	if (pos("a",OPF_HFOOD) + pos("b",OPF_HFOOD) + pos("c",OPF_HFOOD) +
		pos("d",OPF_HFOOD) + pos("e",OPF_HFOOD)) > 0 and pos("f",OPF_HFOOD) > 0 then
		errmsg("Invalid selection");
		reenter;
	endif;
	
	if (pos("a",OPF_HFOOD) + pos("b",OPF_HFOOD) + pos("c",OPF_HFOOD) +
		pos("d",OPF_HFOOD) + pos("e",OPF_HFOOD) + pos("f",OPF_HFOOD)) = 0 then
		errmsg("Select at least one option");
		reenter;
	endif;
PROC OPF_HDAY

preproc
	ask if pos("f",OPF_HFOOD) = 0;
		
{	
postproc

	if (pos("a",OPF_HFOOD) + 
		pos("b",OPF_HFOOD) +
		pos("c",OPF_HFOOD) +
		pos("d",OPF_HFOOD) +
		pos("e",OPF_HFOOD))> 0 and pos("f",OPF_HFOOD)>0 then 
		
		errmsg("Invalid selection");
		reenter;
	endif;
}	
PROC OPF_HHRS

preproc
	ask if pos("f",OPF_HFOOD) = 0;
PROC BLD_OPG

preproc
	 //ask if GLO_WAP = 1;
PROC BLD_OPG_HRS

preproc
	ask if BLD_OPG = 1;
PROC MNF_OPG

preproc
	 //ask if GLO_WAP = 1;
PROC MNF_OPG_HRS

preproc
	ask if MNF_OPG = 1;
PROC WTR_OPG

preproc
	//ask if GLO_WAP = 1;
PROC WTR_OPG_HRS

preproc
	ask if WTR_OPG = 1;
PROC FIR_OPG

preproc
	//ask if GLO_WAP = 1;
PROC FIR_OPG_HRS

preproc
	ask if FIR_OPG = 1;
PROC TVT01

preproc
	
	//ask if pos("d", AGF_CHK) > 0 or pos("d", AGF_ANY) > 0;
PROC TVT01A

preproc
	ask if poschar("X",TVT01) > 0;
	//ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0
PROC TVT02

preproc
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT01A = 1;
PROC TVT03

preproc
	
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT02 = 1 ;
PROC TVT04

preproc
	
	ask if TVT02 = 1;

{
preproc
	ask if poschar("ABCDEFGHIJKLMNOPQRS",TVT01) > 0;
}
PROC TVT05A

preproc
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT02 = 1;
	
PROC TVT05B

preproc
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT02 = 1;
	
PROC TVT06

preproc
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT02 = 1;
PROC TVT07

preproc
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT02 = 1;
PROC TVT08

preproc
	
	ask if TVT07 = 2;
PROC TVT09

preproc
	
	ask if poschar("ABCDEFGHIJKLMNOPQRST",TVT01) > 0 or TVT02 = 1;
PROC TVT10

preproc
	
	ask if TVT08 = 2;
PROC TVT11

preproc
	
	ask if TVT08 = 2;
PROC IND_END_TIME

preproc
	
	if IND_END_TIME = notappl then
		IND_END_TIME = timestamp();
	endif;
	
	setproperty($, "Protected", "Yes");
PROC INDIVEND

onfocus
	if XDEM_AGE in 15:17 then
		setvalueset($,INDIVEND_VS3);
	endif;

postproc

	if RSP_PPNO in 98, 99 and INDIVEND = 1 then
		errmsg("Invalid option");
		reenter;
	elseif RSP_PPNO = 98 and INDIVEND = 9 then
		errmsg("Invalid option");
		reenter;	
	elseif RSP_PPNO = 99 and INDIVEND = 2 then
		errmsg("Invalid option");
		reenter;
	elseif (XDEM_AGE > 64 or XDEM_AGE < 15) and $ <> 3 then
		errmsg("Invalid option");
		reenter;
	endif;
	
	
	
	if $ = 7 then
		time_use_ind();
	endif;


	if $ = 8 then
		launchChild();
	endif;
