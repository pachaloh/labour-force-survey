{Application 'MENULFS' logic file generated by CSPro}
PROC GLOBAL

string  tempSupID; 		//Temporary supervisor ID
numeric edit_option;	//
string  PersonID; 		// Person's line number

array string completed_households(1000,7);

{
forcase CENSUS_DICT(CaseStatus.Partial) do
	interview_vs.add("Continue interview: " + getcaselabel(CENSUS_DICT), key(CENSUS_DICT));
endfor;
}


function team_members_list(valueset string add_members)
	forcase TEAMS_DICT where TEAM_ID = TEAMNO {and USER_CODE <> SUPVR_ID}  do 
		add_members.add(INTRV_NAME,USER_CODE);
	endfor;
end;


//Loop through households assigned to a particular interviewer 
function household_tasks(valueset numeric assigned_hhs)
	forcase ASSIGNED_HHS_DICT where ACLUSTER = MCLUSTER and INTERVIEWER_ID = LOGIN do 
			assigned_hhs.add(AHH_NAME,AHH_NO);
	endfor;
end;


//Funtion to identify eligible members
function eligibles(valueset string eligible_persons, valueset string eligible_child, valueset string eligible_timeuse)
	//Loop through household data files and identify eligible members
	forcase HOUSEHOLDLFS_DICT where CLUSTER = MCLUSTER and GHINTID = LOGIN do   //Fix a household
		do numeric member_index = 1 while member_index <= GHHHSIZE				//Loop through members of the household
			if DEM_06(member_index) in 15:64 and HH_CONCLUSION = 1 then								//Identify eligible (15-64) members
				
				eligible_persons.add(DEM_NAME(member_index),maketext("%v%v%v",CLUSTER,GHHHNO,HMPPNO(member_index)));
				
			endif;
			
			if DEM_06(member_index) in 15:120 and HH_CONCLUSION = 1 then								//Identify eligible (15-64) members
				
				eligible_timeuse.add(DEM_NAME(member_index),maketext("%v%v%v",CLUSTER,GHHHNO,HMPPNO(member_index)));
				
			endif;
			
			if DEM_06(member_index) in 5:17 and HH_CONCLUSION = 1 then
				if DEM_06(member_index) in 5:17 then
				
					eligible_child.add(DEM_NAME(member_index),maketext("%v%v%v",CLUSTER,GHHHNO,HMPPNO(member_index)));

				endif;
			endif;
		enddo;
				
	endfor;
end





//Function that lists households per cluster for each interviewer and their status of progress
function tasks_household (valueset string households)

	numeric nextEntry = 1, sumCheck;
	list string workingHHs; 					//To hold a list of opened households (case ids)
	list string assignedHHs; 					//To hold a list of assigned households (case ids)

	
	//Keep a list of household numbers (case ids) for a specified cluster in workingHHs
	keylist(HOUSEHOLDLFS_DICT(startswith,maketext("%v%v",MCLUSTER,LOGIN)),workingHHs);
	keylist(ASSIGNED_HHS_DICT(startswith,maketext("%v%v",MCLUSTER,LOGIN)),assignedHHs);		//Filling in the household numbers (case ids) 

	//Populate and display households of a specific cluster assigned to a specific interviewer
	{forcase ASSIGNMENTS_DICT(CaseStatus.Partial) where HCLUSTER = TASK_CLUSTER and LOGIN = INTERVIEWER_ID do}
	
	forcase ASSIGNED_HHS_DICT where ACLUSTER = MCLUSTER and INTERVIEWER_ID = LOGIN do
		
		sumCheck = 0; //Set to restart counting for a different assigned household
		 
		do numeric hh_index = 1 while hh_index <=  workingHHs.length()
		
			//If an assigned household was opened (exists in the HH dictionary) , check if it completed or partially saved
			if assignedHHs(nextEntry) = workingHHs(hh_index) then
				
				loadcase(HOUSEHOLDLFS_DICT,workingHHs(hh_index));
					if HH_CONCLUSION in 1:9 then
					
						households.add(maketext("%-25s (COMPLETED)",AHH_NAME),maketext("%v%v%v",ACLUSTER,INTERVIEWER_ID,AHH_NO));
						nextEntry = nextEntry + 1;	
						break;
					elseif HH_CONCLUSION = notappl then
						
						{errmsg("Partial: %d. Assignment(%s):%d. Household(%s)",nextEntry, assignedHHs(nextEntry),hh_index, workingHHs(hh_index));}
						households.add(maketext("%v (PARTIALLY SAVED)",AHH_NAME),maketext("%v%v%v",ACLUSTER,INTERVIEWER_ID,AHH_NO));
						nextEntry = nextEntry + 1;	
						break;
					endif;
				
			else
			
				sumCheck = sumCheck + 1;	//
				//errmsg("sumCheck = %d, Number of HHs %d",sumCheck,workingHHs.length())
			endif;
			

		enddo;
		
		if sumCheck = workingHHs.length() then
			//inc(HouseholdCompleteCount);
			households.add(maketext("%v (NOT VISITED)",AHH_NAME),maketext("%v%v%v",ACLUSTER,INTERVIEWER_ID,AHH_NO));
			nextEntry = nextEntry + 1;
		endif;
		
		
	endfor;
end


function export_data(export_select)
    // change the following filename to your desired output 
	//1. Assignments
	//2.
	//3.
	//4.
	//5.
	//6.
	//7. 
	
	
	if export_select = 1 then
		
	elseif export_select = 2 then
	elseif export_select = 3 then
	elseif export_select = 4 then
	elseif export_select = 5 then
	elseif export_select = 6 then
	elseif export_select = 7 then
	endif;
	
    string pff_filename = path.concat(Application, "assignments.exf.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Export"); 

    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./assignments.exf"); 
    filewrite(dynamic_pff, "InputData=%v", "./assigned_hh_databse.csdb"); 
    filewrite(dynamic_pff, "ExportedData=%v", "./assignments.dat"); 
    filewrite(dynamic_pff, "SPSSDescFile=%v", "./assignments.sps"); 
    filewrite(dynamic_pff, "SASDescFile=%v", "./assignments.sas"); 
    filewrite(dynamic_pff, "STATADescFile=%v", "./assignments.dct"); 
    filewrite(dynamic_pff, "STATALabelsFile=%v", "./assignments.do"); 
    filewrite(dynamic_pff, "RDescFile=%v", "./assignments.R"); 
    filewrite(dynamic_pff, "Listing=%v", "./assignments.exf.lst"); 

    filewrite(dynamic_pff, "[Parameters]"); 
    filewrite(dynamic_pff, "Language=%v", "EN"); 
    filewrite(dynamic_pff, "ViewListing=Always"); 
    filewrite(dynamic_pff, "ViewResults=Yes"); 
    filewrite(dynamic_pff, "InputOrder=Sequential"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff)); 

end; 





function eligible_members(valueset string eligible_persons, valueset string eligible_child, valueset string eligible_timeuse)
	numeric counter = 1, sumCheck, index = 1;

	
	string PersonCaseId;

	forcase HOUSEHOLDLFS_DICT(startswith,maketext("%v%v",MCLUSTER,LOGIN)) do 
		eligible_persons.add(maketext("%v Household",strip(DEM_NAME(1))),"0");
		do counter = 1 while counter <= GHHHSIZE 
			
			//If an eligible adult is found in household datafile, check if interviewed
			if DEM_06(counter) in 15:64 {and HH_END in 1:9} then				
				PersonCaseId = maketext("%v%v%v%v",CLUSTER,GHINTID,GHHHNO,edit("99",HMPPNO(counter)));
				
				if loadcase(INDIVIDUALLFS_DICT,PersonCaseId) and INDIVEND <> notappl then	
					eligible_persons.add(maketext("%-25v (COMPLETED)",strip(DEM_NAME(counter))),PersonCaseId);
				
				elseif loadcase(INDIVIDUALLFS_DICT,PersonCaseId) and INDIVEND = notappl then
				
					eligible_persons.add(maketext("%-25v (PARTIAL)",strip(DEM_NAME(counter))),PersonCaseId);
				
				else

					eligible_persons.add(maketext("%-25v (NOT INTERVIEWED)",strip(DEM_NAME(counter))),PersonCaseId);
				
				endif;
				
				index = index + 1; 
				
			endif;
			
			

		//eligible_timeuse.add(maketext("%v Household",strip(DEM_NAME(1))),"0");
					
			//If an eligible adult is found in household datafile, check if interviewed
			if DEM_06(counter) in 15:64 {and HH_END in 1:9} then
			
				//PersonCaseId = maketext("%v%v%v%v",TCLUSTER,TGHINTCODE,TGHHHNO,edit("99",THMPPNO));
				PersonCaseId = maketext("%v%v%v%v",CLUSTER,GHINTID,GHHHNO,edit("99",HMPPNO(counter)));

				
				if loadcase(TIMEUSE_DICT_A,PersonCaseId) and TUS_END <> notappl then	
					eligible_timeuse.add(maketext("%-25v (COMPLETED)",strip(DEM_NAME(counter))),PersonCaseId);
				
				elseif loadcase(TIMEUSE_DICT_A,PersonCaseId) and TUS_END = notappl then
				
					eligible_timeuse.add(maketext("%-25v (PARTIAL)",strip(DEM_NAME(counter))),PersonCaseId);
				
				else

					eligible_timeuse.add(maketext("%-25v (NOT INTERVIEWED)",strip(DEM_NAME(counter))),PersonCaseId);
				
				endif;
				
				index = index + 1; 
				
			endif;
			
			
			
			//If an eligible child is found in household datafile, check if interviewed
			if DEM_06(counter) in 5:17 {and HH_END in 1:9} then
				
				PersonCaseId = maketext("%v%v%v%v",CLUSTER,GHINTID,GHHHNO,edit("99",HMPPNO(counter)));
								
				if loadcase(CHILD_LABOUR_DICT,PersonCaseId) and CHILD_END_RESULT <> notappl then	
					eligible_child.add(maketext("%-25v (COMPLETED)",strip(DEM_NAME(counter))),PersonCaseId);
				
				elseif loadcase(CHILD_LABOUR_DICT,PersonCaseId) and CHILD_END_RESULT = notappl then
					eligible_child.add(maketext("%-25v (PARTIAL)",strip(DEM_NAME(counter))),PersonCaseId);
				
				else

					eligible_child.add(maketext("%-25v (NOT INTERVIEWED)",strip(DEM_NAME(counter))),PersonCaseId);
				
				endif;
				
				index = index + 1; 
			endif;
		
		enddo;
	endfor;	
end;




function updateAppsCentralOffice()
		numeric abortInd = 1;
			// Download latest version of menu application
		if abortInd = 1 and syncfile(GET, "/LabourForceSurvey2023/Menu/Menu.pen", "./Menu.pen") = 0 then
			errmsg("Updating of Menu.pen failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "/LabourForceSurvey2023/Menu/Menu.pff", "./Menu.pff") = 0 then
			errmsg("Updating of Menu.pff failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		
		// Get latest household data entry programs
		if abortInd = 1 and syncfile(GET, "LabourForceSurvey2023/Household/Household.pen","./Household.pen") = 0 then
			errmsg("Updating of Houseold.pen failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "LabourForceSurvey2023/Household/Household.pff","./Household.pff") = 0 then
			errmsg("Updating of Houseold.pff failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		

		// Get latest Individual data entry programs
		if abortInd = 1 and syncfile(GET, "LabourForceSurvey2023/IndividualLFS/IndividualLFS.pen","./IndividualLFS.pen") = 0 then
			errmsg("Updating of Woman.pen failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		
		
		if abortInd = 1 and syncfile(GET, "LabourForceSurvey2023/IndividualLFS/IndividualLFS.pff","./IndividualLFS.pff") = 0 then
			errmsg("Updating of Woman.pff failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		

		// Get latest Child data entry programs
		if abortInd = 1 and syncfile(GET, "LabourForceSurvey2023/ChildLFS/ChildLFS.pen","./ChildLFS.pen") = 0 then
			errmsg("Updating of Biomarker.pen failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "LabourForceSurvey2023/ChildLFS/ChildLFS.pff","./ChildLFS.pff") = 0 then
			errmsg("Updating of Biomarker.pff failed. Syncing aborted. Try again");
			abortInd = 0;
		endif;
end;

function updateApps()
		
		numeric abortInd = 1;
		
		if abortInd = 1 and syncfile(GET, "./Menu.pen","./Menu.pen") = 0 then
			errmsg("Syncing of Menu.pen failed. Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "./Household.pen","./Household.pen") = 0 then
			errmsg("Syncing of Household.pen failed. Syncing aborted");
		endif;
		
		if abortInd = 1 and syncfile(GET, "./IndividualLFS.pen","./IndividualLFS.pen") = 0 then
			errmsg("Syncing of IndividualLFS.pen failed. Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "./ChildLFS.pen","./ChildLFS.pen") = 0 then
			errmsg("Syncing of Biomarker.pen failed. Syncing aborted");
			abortInd = 0;
		endif;

		if abortInd = 1 and syncfile(GET, "./Menu.pff","./Menu.pff") = 0 then
			errmsg("Syncing of Menu.ff failed. Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "./Household.pff","./Household.pff") = 0 then
			errmsg("Syncing of Household.pff failed. Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "./IndividualLFS.pff","./IndividualLFS.pff") = 0 then
			errmsg("Syncing of IndividualLFS.pff failed. Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncfile(GET, "./ChildLFS.pff","./ChildLFS.pff") = 0 then
			errmsg("Syncing of ChildLFS.pff failed. Syncing aborted");
			abortInd = 0;
		endif;
end;




function launchHousehold() 

    // change the following filename to your desired output 
    string pff_filename = path.concat(Application, "../Household/HouseholdLFS.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
	filewrite(dynamic_pff, "Key=%s", INTERVIEW_HH);
	filewrite(dynamic_pff, "StartMode=Add");
	filewrite(dynamic_pff,"Lock=CaseListing");
	filewrite(dynamic_pff,"ShowInApplicationListing=Never");

    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./HouseholdLFS.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Household.csdb"); 

    filewrite(dynamic_pff, "[ExternalFiles]"); 
    filewrite(dynamic_pff, "INDIVIDUALLFS_DICT=%v", "../Data/Individual.csdb"); 
    filewrite(dynamic_pff, "CLUSTERS_DICT=%v", "../Lookups/clusters.csdb"); 
    filewrite(dynamic_pff, "DETAILED_FIELD_CODES_DICT=%v", "../Lookups/Detailed_field_of_study.csdb"); 
    filewrite(dynamic_pff, "NARROW_FIELD_CODES_DICT=%v", "../Lookups/Narrow_field_of_study.csdb"); 


    filewrite(dynamic_pff, "[Parameters]");
	filewrite(dynamic_pff, "CLUSTER=%s", INTERVIEW_HH[1:4]);
	filewrite(dynamic_pff, "GHHHNO=%s", INTERVIEW_HH[41:2]); 			//Household number
	filewrite(dynamic_pff, "GHINTID=%s", LOGIN); 						//Interviewer ID
	filewrite(dynamic_pff, "GHINTNAME=%s", getlabel(LOGIN,LOGIN)); 		//Interviewer name
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 
	

    close(dynamic_pff); 

	execpff(filename(dynamic_pff), stop); 

end; 



function launchIndividual() 

    // Path for application  
    string pff_filename = path.concat(Application, "../IndividualLFS/IndividualLFS.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
	filewrite(dynamic_pff, "Key=%s", INTERVIEW_IN);
	filewrite(dynamic_pff, "StartMode=Add");
	filewrite(dynamic_pff, "Lock=CaseListing");
	filewrite(dynamic_pff, "ShowInApplicationListing=Never");


    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./IndividualLFS.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Individual.csdb"); 

    filewrite(dynamic_pff, "[ExternalFiles]"); 
	filewrite(dynamic_pff, "CHILD_LABOUR_DICT=%v", "../Data/Child.csdb"); 
    filewrite(dynamic_pff, "CLUSTERS_DICT=%v", "../Lookups/clusters.csdb"); 
    filewrite(dynamic_pff, "HOUSEHOLDLFS_DICT=%v", "../Data/Household.csdb"); 

    filewrite(dynamic_pff, "[Parameters]");
	filewrite(dynamic_pff, "XCLUSTER=%s", INTERVIEW_IN[1:4]);						//Cluster number
	filewrite(dynamic_pff, "XGHHHNO=%s", INTERVIEW_IN[41:2]); 						//Household number
	filewrite(dynamic_pff, "XHMPPNO=%s", INTERVIEW_IN[43:2]); 						//Person's line number	
	filewrite(dynamic_pff, "XDEM_NAME=%s", getlabel(INTERVIEW_IN,INTERVIEW_IN)[1:50]);	//Individual name		
	filewrite(dynamic_pff, "GHINTCODE=%s", LOGIN); 									//Interviewer ID
	filewrite(dynamic_pff, "XGHINTNAME=%s", getlabel(LOGIN,LOGIN)); 				//Interviewer name
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff), stop); 

end; 


function launchChild() 

    // change the following filename to your desired output 
    string pff_filename = path.concat(Application, "../ChildLFS/ChildLFS.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
	filewrite(dynamic_pff, "Key=%s", INTERVIEW_CHILD);
	filewrite(dynamic_pff, "StartMode=Add");
	filewrite(dynamic_pff,"Lock=CaseListing");
	filewrite(dynamic_pff,"ShowInApplicationListing=Never");


    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./ChildLFS.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Child.csdb"); 

    filewrite(dynamic_pff, "[ExternalFiles]"); 
    filewrite(dynamic_pff, "CLUSTERS_DICT=%v", "../Lookups/clusters.csdb"); 
    filewrite(dynamic_pff, "HOUSEHOLDLFS_DICT=%v", "../Data/Household.csdb"); 
    filewrite(dynamic_pff, "INDIVIDUALLFS_DICT=%v", "../Data/Individual.csdb"); 

    filewrite(dynamic_pff, "[Parameters]");
	filewrite(dynamic_pff, "CCLUSTER=%s", INTERVIEW_CHILD[1:4]);	//Cluster number
	filewrite(dynamic_pff, "CGHHHNO=%s", INTERVIEW_CHILD[41:2]); 	//Household number
	filewrite(dynamic_pff, "CHMPPNO=%s", INTERVIEW_CHILD[43:2]); 	//Child's line number
	//filewrite(dynamic_pff, "A1=%s", getlabel(INTERVIEW_CHILD,INTERVIEW_CHILD)); 	//Child's name	
	filewrite(dynamic_pff, "GHINTID=%s", LOGIN); 					//Interviewer ID
	filewrite(dynamic_pff, "GHINTNAME=%s", getlabel(LOGIN,LOGIN)); 	//Interviewer name
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff), stop); 

end; 


function time_use_ind2() 

    // change the following filename to your desired output 
    string pff_filename = path.concat(Application, "../TimeUse/timeuse.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
	filewrite(dynamic_pff, "Key=%s", TIME_USE_SURVEY);
	filewrite(dynamic_pff, "StartMode=Add");
	filewrite(dynamic_pff, "Lock=CaseListing");
	filewrite(dynamic_pff, "ShowInApplicationListing=Never");


    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./timeuse.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Timeuse.csdb"); 

    filewrite(dynamic_pff, "[Parameters]");
	filewrite(dynamic_pff, "TCLUSTER=%s", TIME_USE_SURVEY[1:4]);		//Cluster number
	filewrite(dynamic_pff, "TGHHHNO=%s", TIME_USE_SURVEY[41:2]); 		//Household number
	filewrite(dynamic_pff, "THMPPNO=%s", TIME_USE_SURVEY[43:2]); 		//Child's line number
	filewrite(dynamic_pff, "TGHINTCODE=%s", LOGIN); 					//Interviewer ID
	filewrite(dynamic_pff, "TGHINTNAME=%s", getlabel(LOGIN,LOGIN)); 	//Interviewer name
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff), stop); 

end; 


function time_use_ind() 

    // change the following filename to your desired output 
    string pff_filename = path.concat(Application, "../TimeUse/TimeUse.pff"); 

    file dynamic_pff; 
    setfile(dynamic_pff, pff_filename, create); 

    filewrite(dynamic_pff, "[Run Information]"); 
    filewrite(dynamic_pff, "Version=CSPro 7.7"); 
    filewrite(dynamic_pff, "AppType=Entry"); 
    filewrite(dynamic_pff, "ShowInApplicationListing=Never"); 

    filewrite(dynamic_pff, "[DataEntryInit]"); 
    filewrite(dynamic_pff, "StartMode=Add"); 
    filewrite(dynamic_pff, "Key=%s", TIME_USE_SURVEY); 
    filewrite(dynamic_pff, "Lock=CaseListing"); 

    filewrite(dynamic_pff, "[Files]"); 
    filewrite(dynamic_pff, "Application=%v", "./TimeUse.ent"); 
    filewrite(dynamic_pff, "InputData=%v", "../Data/Timeuse.csdb"); 

    filewrite(dynamic_pff, "[Parameters]"); 
    filewrite(dynamic_pff, "TCLUSTER=%v", TIME_USE_SURVEY[1:4]); 
    filewrite(dynamic_pff, "TGHHHNO=%v", TIME_USE_SURVEY[41:2]); 
    filewrite(dynamic_pff, "THMPPNO=%v", TIME_USE_SURVEY[43:2]); 
    filewrite(dynamic_pff, "TGHINTCODE=%v", LOGIN); 
    filewrite(dynamic_pff, "TGHINTNAME=%v", getlabel(LOGIN,LOGIN)); 
    filewrite(dynamic_pff, "OnExit=%v", "../Menu/MenuLFS.pff"); 

    close(dynamic_pff); 

    execpff(filename(dynamic_pff),stop); 

end; 




function syncWithCentralOffice()				//Function for data transfer betwen supervisor and Central Office
// Connect to the webserver
	if syncconnect(Dropbox) then
	
		// Sync cases file with server
		
	
		numeric abortInd = 1;
		
		if abortInd = 1 and syncdata(BOTH, HOUSEHOLDLFS_DICT) = 0 then
			errmsg("Syncing of Household data failed! Syncing aborted");
			abortInd = 0;
		endif;

		if abortInd = 1 and syncdata(BOTH, INDIVIDUALLFS_DICT) = 0 then
			errmsg("Syncing of individual data failed! Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncdata(BOTH, TIMEUSE_DICT_A) = 0 then
			errmsg("Syncing of time use data failed! Syncing aborted");
			abortInd = 0;
		endif;

		if abortInd = 1 and syncdata(PUT, TEAMS_DICT) = 0 then
			errmsg("Syncing of team file failed! Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncdata(BOTH, ASSIGNED_HHS_DICT) = 0 then
			errmsg("Syncing of HH assignments data failed! Syncing aborted");
			abortInd = 0;
		endif;

		if abortInd = 1 and syncdata(BOTH, CHILD_LABOUR_DICT) = 0 then
			errmsg("Syncing of child labour data failed! Syncing aborted");
			abortInd = 0;
		endif;


{
		numeric upgradeAppsCentral = accept("Update Applications from Central Office?",
									 "Yes, update",
									 "Continue without updating");
		if upgradeAppsCentral = 1 then 
			
			updateAppsCentralOffice();
			
		endif;		
	}	
		
		{
		// Download latest version of menu application
		syncfile(GET, "LabourForceSurvey2023/Apps/Menu.pen", "./Menu.pen");
		syncfile(GET, "LabourForceSurvey2023/Apps/Menu.pff", "./Menu.pen");
		
		// Get latest household, woman and biomarker data entry programs
		syncfile(GET, "LabourForceSurvey2023/Apps/Household.pen","./Household.pen");
		syncfile(GET, "LabourForceSurvey2023/Apps/Household.pff","./Household.pff");
		

		// Get latest Woman data entry programs
		syncfile(GET, "LabourForceSurvey2023/Apps/Woman.pen","./Woman.pen");
		syncfile(GET, "LabourForceSurvey2023/Apps/Woman.pff","./Woman.pff");
		

		// Get latest Biomarker data entry programs
		syncfile(GET, "LabourForceSurvey2023/Apps/Biomarker.pen","./Biomarker.pen");
		syncfile(GET, "LabourForceSurvey2023/Apps/Biomarker.pff","./Biomarker.pff");
		}
		//Send Cluster Progress Report
		//syncfile(PUT, "LabourForceSurvey2023/Apps/Biomarker.pen","./Biomarker.pen");
		
		
		// Disconnect from the server
		syncdisconnect();
	endif;
end;




function downloadDatafromServer()				//Function for data transfer betwen supervisor and Central Office
// Connect to the webserver
	if syncconnect(Dropbox) then
	
		// Sync cases file with server
		
	
		numeric abortInd = 1;
		
		if abortInd = 1 and syncdata(GET, HOUSEHOLDLFS_DICT) = 0 then
			errmsg("Syncing of Household data failed! Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncdata(GET, TIMEUSE_DICT_A) = 0 then
			errmsg("Syncing of time use data failed! Syncing aborted");
			abortInd = 0;
		endif;

		if abortInd = 1 and syncdata(GET, INDIVIDUALLFS_DICT) = 0 then
			errmsg("Syncing of individual data failed! Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncdata(GET, TEAMS_DICT) = 0 then
			errmsg("Syncing of team file failed! Syncing aborted");
			abortInd = 0;
		endif;
		
		if abortInd = 1 and syncdata(GET, ASSIGNED_HHS_DICT) = 0 then
			errmsg("Syncing of HH assignments data failed! Syncing aborted");
			abortInd = 0;
		endif;

		if abortInd = 1 and syncdata(GET, CHILD_LABOUR_DICT) = 0 then
			errmsg("Syncing of child labour data failed! Syncing aborted");
			abortInd = 0;
		endif;

		// Disconnect from the server
		
		downloadDatafromServer = abortInd;
		syncdisconnect();
	endif;
	
	
end;







function syncWithSupervisor() //Funtion to transfer from interviewer to supervisor

	if syncconnect(bluetooth) then
		
		// Sync main data file.
		if syncdata(BOTH, HOUSEHOLDLFS_DICT) = 0 then 		//Household Cases
			errmsg("Failed to transfer household data");
		endif;
		
		if syncdata(BOTH, INDIVIDUALLFS_DICT) = 0 then 		//Individual 15+ Cases
			errmsg("Failed to transfer individual 15+ years cases");
		endif;
		
		if syncdata(BOTH, CHILD_LABOUR_DICT) = 0 then		//5-17 Child Cases
			errmsg("Failed to transfer child labour data");
		endif;

		if syncdata(BOTH, TIMEUSE_DICT_A) = 0 then			//Time use Cases
			errmsg("Failed to transfer Time Use data");
		endif;

		
		if syncdata(BOTH, TEAMS_DICT) = 0 then				//Teams Cases
			errmsg("Failed to transfer Teams data");
		endif;
		
		if syncdata(BOTH, CLUSTERS_DICT) = 0 then			//Clusters Cases
			errmsg("Failed to transfer Clusters data");
		endif;
		
		if syncdata(BOTH, ASSIGNED_HHS_DICT) = 0 then		//Work (Household) Assignment Cases
			errmsg("Failed to transfer Assignments data");
		endif;
		
		
{		numeric upgradeApps = accept("Update Applications from Supervisor?",
									 "Yes, update",
									 "Continue without updating");
		if upgradeApps = 1 then 
			
			updateApps();
			
		endif;
}		
		syncdisconnect();
	endif;
end;


function syncWithInterviewer()
	// Run the Bluetooth server to receive data from interviewer.
	syncserver(Bluetooth);
end;








PROC MENULFS_FF

PROC TEAMNO


preproc
	
	if loadsetting("teamno") <> "" {and visualvalue(MCLUSTER) <> notappl} then
		TEAMNO = tonumber(loadsetting("teamno"));
		noinput;
	endif;


	
postproc
	
	savesetting("teamno", maketext("%v", TEAMNO));
PROC LOGIN

preproc
	
	if loadsetting("login") <> "" then
		LOGIN = loadsetting("login");
		noinput;
	endif;

onfocus

	valueset string team_members; //Dynamic valueset to hold members per each team

	team_members_list(team_members);  //List team members
	
	team_members.add("Download data from server ","3");
	team_members.add("Transfer data with supervisor ","2");
	team_members.add("Begin work as supervisor","1");
	
	if TEAMNO = 99 then
		team_members.add("Central Office","0");
	endif;
	
	setvalueset($,team_members);


	
	
	
postproc

	//No more than one supervisor should belong to the same team
	//If an entered team number already exists in the system
	if locate(TEAMS_DICT,startswith,edit("99",TEAMNO)) and $ = "1" then
		errmsg("No two supervisors can belong to the same team (%d)",TEAMNO);
		reenter;
	endif;
	
	savesetting("login", maketext("%v", LOGIN));
	
	if $ = "2" then
		syncWithSupervisor();
		reenter;
	endif;
	
	if $ = "3" then
		numeric datadownload = downloadDatafromServer();
		
		//Copy the files to a folder
		if datadownload then
			string datapath = path.concat(pathname(Application),"../Data");  //Specify folder for main data collection  
			string data_collection_folder = "C:/Users/luhan/Documents/GitHub/lfs-analysis/data collection/data";
			//string data_collection_folder = path.concat(pathname(Application),"../copyData");
			
			//errmsg("Data path: %s",datapath);
			
			if filecopy(pathconcat(datapath, "*.csdb"), data_collection_folder) then
				errmsg("Files copied to %s",data_collection_folder);
			else
				errmsg("Files not copied");
			endif;
			reenter;
		endif;
		
		reenter;
		
	endif;
	
	//If central Office, go to approprite functionality
	if $ = "0" then
		skip to CENTRAL_OFFICE;
	endif;
PROC PASSCODE


preproc
	
	if loadsetting("passcode") <> "" then
		PASSCODE = tonumber(loadsetting("passcode"));
		noinput;
	endif;


postproc

	//Supervisor program access pin 	
	if LOGIN = "1" and $ <> 2057 then
		errmsg("Invalid access code");
		reenter;
	elseif LOGIN = "1" and $ = 2057 then
		skip to NAME_OF_SUP;
	endif;
	
	//If password field is blank, prompt for a password
	if loadcase(TEAMS_DICT,TEAMNO,LOGIN) and PASS_CODE = notappl or PASS_CODE = default then
		PASS_CODE = tonumber(prompt("Set your password",password));
		
		if not PASS_CODE in 1000:9999 then
			errmsg("Password must be 4-digit and not start with zero(0)");
			reenter;
		endif;
		
		if writecase(TEAMS_DICT) then
			errmsg("Password set! Keep it safe ");
		endif;
		
	elseif loadcase(TEAMS_DICT,TEAMNO,LOGIN) and PASS_CODE <> PASSCODE then
		errmsg("Invalid password");
		reenter;
	endif;
	
	savesetting("passcode", maketext("%v", PASSCODE));

PROC MCLUSTER

preproc

	
	if loadsetting("mcluster") <> "" then
		MCLUSTER = tonumber(loadsetting("mcluster"));
		noinput;
	endif;

	
	ask if LOGIN <> "1";
	
postproc

	if loadcase(CLUSTERS_DICT,$) then
		//Ok: Cluster exists in the system
	else
		errmsg("Invalid cluster");
		reenter;
	endif;
	
	savesetting("mcluster", maketext("%v", MCLUSTER));
	//No two supervisors/teams should belong to the same cluster
	
	//If login in for the first time
	if LOGIN = "1" then
		//New supervisor to continue to the next supervisor creation form
		
	else
		loadcase(TEAMS_DICT,TEAMNO,LOGIN);
		
		if MEMBER_ROLE = 2 then
			skip to INTERV_MENU;
		endif;
		
	endif;

PROC SUPERVISOR_CREATION_FORM

preproc

		ask if LOGIN = "1";
		
PROC PASSWORD_SUP

//Restrict password to a 4-digit number
if not PASSWORD_SUP in 1000:9999 then
	errmsg("Password must be 4-digit and not start with zero(0)");
	reenter;
endif;

//Prevent creating multiple supervisors in one team
if countcases(TEAMS_DICT where TEAM_ID = TEAMNO and MEMBER_ROLE = 1)  < 1 then

	TEAM_ID    = TEAMNO;
	USER_CODE  = uuid();
	tempSupID  = USER_CODE;
	SUPVR_ID   = USER_CODE;
	INTRV_NAME = NAME_OF_SUP;
	PASS_CODE  = $;
	MEMBER_ROLE = 1;
	DATE_CREATED = sysdate();
	TIME_CREATED = systime("HHMMSS");
	
	
	if writecase(TEAMS_DICT) then
		errmsg("Successfully created account for %s",NAME_OF_SUP);
	endif;
	
	//Save login details for supervisor
	savesetting("passcode", maketext("%v", PASSWORD_SUP));
	savesetting("login", maketext("%v", USER_CODE));
endif;

PROC SUP_CLUSTER

preproc
 ask if LOGIN = "1";
 
postproc
	MCLUSTER = SUP_CLUSTER;
 
PROC TEAM_MGT

onfocus
	valueset numeric team_mgnt;
	
		valueset string team_members; //Dynamic valueset to hold members per each team

	team_members_list(team_members);  //List team members
	
	team_mgnt.add("Manage team",1);
	team_mgnt.add("Assign tasks",2);
	
	//team_members_list(members_tasks);

	//For the first time use, user code for supervisor is "1", and won't be able to link to assigned houselds
	if LOGIN = "1" then
		LOGIN = tempSupID;
		MCLUSTER = SUP_CLUSTER;
	endif;


	//If self-assigned households, interview them
	valueset numeric assigned_hhs;
	household_tasks(assigned_hhs);
	
	
	if assigned_hhs.length() > 0 then
		team_mgnt.add("Conduct interviews",3)
	endif;
	
	team_mgnt.add("Sync with server",4);
	team_mgnt.add("Sync with interviewer",5);
	team_mgnt.add("View Assigned tasks",6);
	team_mgnt.add("View Progress report",7);
	team_mgnt.add("Change cluster",8);
	team_mgnt.add("Logout",9);
	
	
	setvalueset($,team_mgnt);
	
	
postproc
	
	if $ = 1 then
		skip to EDIT_MEMBERS;
	elseif $ = 2 then
		skip to MANAGE_TASKS;
	elseif $ = 3 then
		skip to INTERV_MENU;
	elseif $ = 4 then
		syncWithCentralOffice();
		reenter;
	elseif $ = 5 then
		syncWithInterviewer();
		reenter;
	elseif $ = 6 then
		//ClusterInterviewsProgressReport();	//View assigned households
		reenter;
	elseif $ = 7 then
		ClusterInterviewsProgressReport();
		reenter;
	elseif $ = 8 then
		reenter MCLUSTER;
	elseif $ = 9 then
		savesetting("teamno", "");
		savesetting("login", "");
		savesetting("passcode","");
		
		stop(1);
		
	endif;
PROC EDIT_MEMBERS


onfocus

	valueset string add_members; //Dynamic valueset to hold members per each team
	
	team_members_list(add_members);
	
	add_members.add("Sync data with an interviewer","2");
	add_members.add("Add an interviewer","1");
	
	setvalueset($,add_members);

postproc


	if $ = "1" then
		skip to ENUM_CODE;
	elseif $ = "2" then
		syncWithInterviewer();
		reenter;
	else
	
		string edit_member = maketext("Do you want to rename or delete %v",getlabel($,$));
		
		       edit_option = accept(edit_member,
									"Rename",
									"Delete",
									"View PIN",
									"Assign work..");
									
		if edit_option = 1 then
			//Rename name of team member
			if loadcase(TEAMS_DICT,TEAMNO,EDIT_MEMBERS) then //Load case in memory
				INTRV_NAME = toupper(prompt("Edit name"));
				if writecase(TEAMS_DICT) then
					errmsg("Name changed to: %s",INTRV_NAME);
				endif;
				
			endif;
			
		elseif edit_option = 2 then
			
			if loadcase(TEAMS_DICT,TEAMNO,EDIT_MEMBERS) and MEMBER_ROLE = 1 then
				errmsg("You cannot delete a supervisor account");
				reenter;
			endif;
		
			errmsg("Are you sure you want to delete %s?",getlabel($,$))
				select("Yes",continue,"No",reenter);
			//Check if member assigned households
			//Check if members had worked on some interviews before
			
			forcase HOUSEHOLDLFS_DICT where GHINTID = EDIT_MEMBERS do
				
			endfor;
			
			if delcase(TEAMS_DICT,TEAMNO,EDIT_MEMBERS) then
				errmsg("%s successfully deleted from your team",getlabel($,$));
				reenter;
			endif;
			
		elseif edit_option = 3 then
		
			if loadcase(TEAMS_DICT,TEAMNO,EDIT_MEMBERS) then //Load case in memory
				errmsg("PIN code for %s is %d",INTRV_NAME,PASS_CODE);	
			else
				errmsg("Try again later, or contact HQs");
				reenter;				
			endif;
			
		elseif edit_option = 4 then
			skip to MANAGE_TASKS;
		endif;

		reenter;  //If no option selected, cancel
		
	endif;
	
	//add_remove_hhs  = accept("Add or Remove households ")
PROC MANAGE_TASKS

preproc
	if edit_option = 3 then
		MANAGE_TASKS = EDIT_MEMBERS;
	endif;

onfocus

	valueset string members_tasks; //Dynamic valueset to hold members per each team
	
	team_members_list(members_tasks);
	

	
	setvalueset($,members_tasks);

postproc

	
		if $ = "1" then		
			skip to INTERVIEW_HH;
		elseif $ = "2" then
			skip to INTERVIEW_IN
		elseif $ = "3" then
			skip to INTERVIEW_CHILD	
		else 
			errmsg("Assign/Remove household to/from %s,",getlabel($,$))
				select("Assign",ASSIGN_HH,"Remove",REM_HH);
		endif;

PROC ENUM_CODE

preproc
	$ = " ";
	$ = uuid();

{	
	forcase TEAMS_DICT where TEAM_ID = TEAMNO do
		if $ = USER_CODE then
			errmsg("Use unique codes for different interviewer!");
			reenter;
		endif;
	endfor;	
}	
		
	
	noinput;
	
PROC ENUM_NAME


preproc
	$ = " ";


postproc
	


forcase TEAMS_DICT where TEAM_ID = TEAMNO do
	if strip(INTRV_NAME) = strip(ENUM_NAME) then
		errmsg("Use unique names for different interviewer!");
		reenter;
	endif;
endfor;

//Values to write to a team members' data file
TEAM_ID    = TEAMNO;
USER_CODE  = ENUM_CODE;

//Make sure that supervisor code is correct
if LOGIN = "1" then
	SUPVR_ID   = tempSupID;
else
	SUPVR_ID   = LOGIN;
endif;

INTRV_NAME  = ENUM_NAME;
PASS_CODE   = notappl;
MEMBER_ROLE = 2;
DATE_CREATED = sysdate();
TIME_CREATED = systime("HHMMSS");


if writecase(TEAMS_DICT) then
	errmsg("%s added successfully",$);
endif;

reenter EDIT_MEMBERS; //Return back to team creation menu
PROC ASSIGN_HH


//Dispaly available households
onfocus

	numeric sumCheck = 0, workCluster;
	
	valueset numeric assigned_hhs; //Dynamic valueset households
	
	//To avoid empty cluster fields, get the value from where it available
	if SUP_CLUSTER in 1:99999 then
		workCluster = SUP_CLUSTER;
	else
		workCluster = MCLUSTER;
	endif;
	

	
	//Loop through already assigned households for a specific interviewer
	forcase ASSIGNED_HHS_DICT where ACLUSTER = workCluster and INTERVIEWER_ID = MANAGE_TASKS do 
				assigned_hhs.add(AHH_NAME,AHH_NO);
	endfor;
	
	//Add a separator between assigned and unassigned households 
	if assigned_hhs.length() > 0 then
		assigned_hhs.add("---------------------------------",0);
	endif;
	
	//Loop through all households withn a cluster, and remove already assigned households
	
	forcase HH_DATABASE_DICT where HH_CLUSTER = workCluster  do  
		forcase ASSIGNED_HHS_DICT where ACLUSTER = workCluster do
			
			//To mark households never assigned to anybody and avoid listing a household more than twice 
			if AHH_NO = HH_NUMBER then
				sumCheck = sumCheck + 1; //If household (number) not already assigned 
			else
				sumCheck = sumCheck + 0; //If household (number) already already assigned
			endif; 

		endfor;	
		
			if sumCheck = 0 then  		  //A sum of 0 means child not yet entered
				assigned_hhs.add(HH_HEAD,HH_NUMBER);		
			endif;
		
		sumCheck = 0;
		
	endfor;
	
	//team_members.add("Begin as supervisor","1");
	
	setvalueset($,assigned_hhs);
	
postproc

	if $ = 0 then
		reenter;
	else
		errmsg("Add %s's household to %s list?",getlabel($,$),getlabel(MANAGE_TASKS,MANAGE_TASKS))
			select("Yes",continue,"Cancel",reenter);
	endif;
	
	
	//Update list of assigned households for interview
	
		ACLUSTER       = workCluster; 		//Cluster number
		INTERVIEWER_ID = MANAGE_TASKS;		//Interviewer ID
		AHH_NO         = $;					//Household number
		AHH_NAME       = getlabel($,$);		//Name of household head
		TIME_ASSIGNED  = timestamp();		//Time created
		
		//hh_tasks();
		

	// Case writing to a file
	
	if writecase(ASSIGNED_HHS_DICT) then  
		errmsg("Household added successfully! Add another household?")
			select("Yes",reenter,"No",MANAGE_TASKS);
	endif;

PROC REM_HH


//Dispaly available households
onfocus

	
	valueset numeric assigned_hhs; //Dynamic valueset households
	
	//Loop through already assigned households for a specific interviewer
	forcase ASSIGNED_HHS_DICT where ACLUSTER = MCLUSTER and INTERVIEWER_ID = MANAGE_TASKS do 
				assigned_hhs.add(AHH_NAME,AHH_NO);
	endfor;
	
	if assigned_hhs.length() = 0 then
		errmsg("%s is not yet assigned any household!",getlabel(EDIT_MEMBERS,MANAGE_TASKS));
			reenter MANAGE_TASKS;
	endif;
	
	setvalueset($,assigned_hhs);


postproc
	
	//If not yet assigned any household
	if assigned_hhs.length() = 0 then
		errmsg("%s is not yet assigned any household! Do you want to assign instead?",getlabel(MANAGE_TASKS,MANAGE_TASKS))
			select("Yes",ASSIGN_HH,"No",MANAGE_TASKS);
	endif;
	
	errmsg("Delete %s household from %s",getlabel($,$),getlabel(MANAGE_TASKS,MANAGE_TASKS))
		select("Confirm",continue,"Cancel",reenter);


	//Check if the household was opened/started/interviewed
	if locate(HOUSEHOLDLFS_DICT,=,maketext("%v%v%v",MCLUSTER,MANAGE_TASKS,REM_HH)) then
		errmsg("Caution! There exist data for household %s! Do you want to continue",getlabel($,$))
			select("Delete",continue,"Cancel",reenter);
	else
		errmsg("Verify with interviewer if %s household is not visited!",getlabel($,$))
			select("Ok to Delete ",continue,"Sync with interviewer first",TEAM_MGT);
	endif;
	
	//Deleting a selected household
	if delcase(ASSIGNED_HHS_DICT,MCLUSTER,MANAGE_TASKS,$) then
		errmsg("Household deleted");
	else
		errmsg("Household not deleted");
	endif;


	reenter;

PROC INTERV_MENU

onfocus
	
	valueset numeric interviewer_menu;
	valueset numeric assigned_hhs;
	valueset string eligible_persons;
	valueset string eligible_child;
	valueset string eligible_timeuse;

	
	//Loop through already assigned households for a specific interviewer
	forcase ASSIGNED_HHS_DICT where ACLUSTER = MCLUSTER and INTERVIEWER_ID = LOGIN do 
			assigned_hhs.add(AHH_NAME,AHH_NO);
	endfor;
	


	eligibles(eligible_persons,eligible_child,eligible_timeuse);
	
	if assigned_hhs.length() > 0 then
		interviewer_menu.add("Interview household",1);
	else
		errmsg("You must be assigned a household to work in this cluster");
	endif;
	
	
	if eligible_persons.length() > 0 then
		interviewer_menu.add("Interview Individual",2);
	endif;
	
	
	if eligible_child.length() > 0 then
		interviewer_menu.add("Interview Child",3);
	endif;
	
	if eligible_timeuse.length() > 0 then
		interviewer_menu.add("Time Use",4);
	endif;
	
		interviewer_menu.add("Sync data with supervisor",5);
		interviewer_menu.add("View Assigned tasks",5);
		interviewer_menu.add("Change cluster",6);
		interviewer_menu.add("Logout",9);
	
	setvalueset($,interviewer_menu);
	
	
	
postproc
	
		if $ = 1 then		
			skip to INTERVIEW_HH;
		elseif $ = 2 then
			skip to INTERVIEW_IN;
		elseif $ = 3 then
			skip to INTERVIEW_CHILD	;
		elseif $ = 4 then
			skip to TIME_USE_SURVEY;	
		elseif $ = 5 then
			syncWithSupervisor();
			reenter;
		elseif $ = 5 then
			//	
		elseif $ = 6 then
			reenter MCLUSTER;	
		elseif $ = 9 then				//Logout
		
			savesetting("teamno", "");
			savesetting("login", "");
			savesetting("passcode","");
			
			stop(1);

		endif;

	
	
PROC INTERVIEW_HH

onfocus
{	
	valueset string interv_hh;
	
	//Loop through already assigned households for a specific interviewer
	forcase ASSIGNED_HHS_DICT where ACLUSTER = MCLUSTER and INTERVIEWER_ID = LOGIN do 
				interv_hh.add(AHH_NAME,maketext("%v%v",MCLUSTER,AHH_NO));
	endfor;
	
	//setvalueset($,interv_hh);
	
	
	
	numeric nextEntry = 1, sumCheck;
	valueset string households;
	
	list string workingHHs; 					//To hold a list of opened households (case ids)
	list string assignedHHs; 					//To hold a list of assigned households (case ids)

	
	//Keep a list of household numbers (case ids) for a specified cluster in workingHHs
	keylist(HOUSEHOLDLFS_DICT(startswith,maketext("%v",CLUSTER)), workingHHs);
	keylist(ASSIGNED_HHS_DICT(startswith,maketext("%v",CLUSTER)), assignedHHs);		//Filling in the household numbers (case ids) 

	//Populate and display households of a specific cluster assigned to a specific interviewer
	{forcase ASSIGNMENTS_DICT(CaseStatus.Partial) where HCLUSTER = TASK_CLUSTER and LOGIN = INTERVIEWER_ID do}
	
	forcase ASSIGNED_HHS_DICT where CLUSTER = ACLUSTER and LOGIN = INTERVIEWER_ID do
		
		sumCheck = 0; //Set to restart counting for a different assigned household
		 
		do numeric hh_index = 1 while hh_index <=  workingHHs.length()
		
			//If a household was opened (exists in the HH dictionary) , check if it completed or partially saved
			errmsg("Assigned: %s, Opened: %s",assignedHHs(nextEntry),workingHHs(hh_index));
			if assignedHHs(nextEntry) = workingHHs(hh_index) then
				
				errmsg("Assigned: %s equal to Opened: %s",assignedHHs(nextEntry),workingHHs(hh_index));
				loadcase(HOUSEHOLDLFS_DICT,workingHHs(hh_index));
					if HH_INTRODUCTION in 1:9 then
					
						households.add(maketext("%-25s (COMPLETED)",AHH_NAME),maketext("%v%v",ACLUSTER,AHH_NO));
						nextEntry = nextEntry + 1;	
						break;
					elseif HH_INTRODUCTION = notappl then
						
						{errmsg("Partial: %d. Assignment(%s):%d. Household(%s)",nextEntry, assignedHHs(nextEntry),hh_index, workingHHs(hh_index));}
						households.add(maketext("%v (PARTIALLY SAVED)",AHH_NAME),maketext("%v%v",ACLUSTER,AHH_NO));
						nextEntry = nextEntry + 1;	
						break;
					endif;
				
			else
			
				sumCheck = sumCheck + 1;	//
				//errmsg("sumCheck = %d, Number of HHs %d",sumCheck,workingHHs.length())
			endif;
			

		enddo;
		
		if sumCheck = workingHHs.length() then
			//inc(HouseholdCompleteCount);
			households.add(maketext("%v (NOT VISITED)",AHH_NAME),maketext("%v%v",ACLUSTER,AHH_NO));
			nextEntry = nextEntry + 1;
		endif;
		
		
	endfor;
}

	valueset string households;
		
	tasks_household(households);
	
	setvalueset($,households);

postproc

	launchHousehold();
	
PROC INTERVIEW_IN

onfocus


	valueset string eligible_persons;
	valueset string eligible_child;
	valueset string eligible_timeuse;
{	
	eligibles(eligible_persons,eligible_child);

	
	setvalueset($,eligible_persons);
}	
{
	numeric counter = 1, sumCheck, index = 1;
	valueset string eligible_person;
	
	string PersonCaseId;

	forcase HOUSEHOLDLFS_DICT(startswith,maketext("%v%v",MCLUSTER,LOGIN)) do 
		do counter = 1 while counter <= GHHHSIZE 
			
			//If an eligible adult is found in household datafile, check if interviewed
			if DEM_06(counter) in 15:64 {and HH_END in 1:9} then
				
				PersonCaseId = maketext("%v%v%v%v",CLUSTER,GHINTID,GHHHNO,edit("99",HMPPNO(counter)));
				
				//errmsg("Woman Case: %s", WomanCaseId);
				
				if loadcase(INDIVIDUALLFS_DICT,PersonCaseId) and INDIVEND <> notappl then
	
					eligible_person.add(maketext("%-25v (COMPLETED)",HMPPNO(counter)),PersonCaseId);
				
				elseif loadcase(INDIVIDUALLFS_DICT,PersonCaseId) and INDIVEND = notappl then
					//caseCode(index) = maketext("%v%v%v%v",CLUSTER_NUMBER,INT_NO,HOUSEHOLD_NUMBER,edit("99",Q1(counter)));		

					eligible_person.add(maketext("%-25v (PARTIAL)",HMPPNO(counter)),PersonCaseId);
				
				else

					eligible_person.add(maketext("%-25v (NOT INTERVIEWED)",HMPPNO(counter)),PersonCaseId);
				
				endif;
				
				index = index + 1; 
			endif;
		
		enddo;
	endfor;	
}


	eligible_members(eligible_persons, eligible_child, eligible_timeuse);
	
	setvalueset($,eligible_persons);
	
postproc
	if $ = "0" then
		errmsg("Select an individual");
		reenter;
	else
		launchIndividual();
	endif;
	
	reenter;
	
PROC INTERVIEW_CHILD

onfocus

	valueset string eligible_persons;
	valueset string eligible_child;
	valueset string eligible_timeuse;
{	
	eligibles(eligible_persons,eligible_child);
	
	setvalueset($,eligible_child);
}

	eligible_members(eligible_persons,eligible_child,eligible_timeuse);
	setvalueset($,eligible_child);

	
postproc
	
	launchChild();
	reenter;
PROC TIME_USE_SURVEY


onfocus


	valueset string eligible_persons;
	valueset string eligible_child;
	valueset string eligible_timeuse;

	eligible_members(eligible_persons, eligible_child, eligible_timeuse);
	
	setvalueset($,eligible_timeuse);
	
postproc

	if $ = "0" then
		errmsg("Select an individual");
		reenter;
	else
		time_use_ind();
	endif;
	
	reenter;
PROC CENTRAL_OFFICE


onfocus 
	
	list string unique_households, unique_clusters, unique_user;	//To hold unique household numbers
	keylist(HOUSEHOLDLFS_DICT, unique_households);	
	valueset cluster_number;
	
	unique_households.show("Household numbers");
	

	if $ = 1 then
	
		//Extracting unique clusters already has work on
		do numeric counter = 1 while counter <= unique_households.length()			
			
			if unique_households(counter+1)[1:4] <> unique_households(counter)[1:4] then
				unique_clusters.add(unique_households(counter)[1:4]);
			endif;				

		enddo;
		
		unique_clusters.show("Unique Clusters");
		unique_user.show("Unique Interviewers");
				
			
		//Count number of households per cluster		
		do numeric counter = 1 while counter <= unique_clusters.length() 
			numeric total_hhs = countcases(HOUSEHOLDLFS_DICT where CLUSTER = tonumber(unique_clusters(counter))); 
			cluster_number.add(maketext("%v: %v",counter,total_hhs),counter);
		enddo;
		
	endif;
	
PROC LFS_CLUSTER_REPORT


onfocus


	//Loop through already assigned households for a specific interviewer
	numeric hh_ctr = 1;
	numeric duplicates_hh = 0;
	string report_heading;
	
	completed_households.clear();
	numeric number_of_hh_cases = countcases(ASSIGNED_HHS_DICT where HH_CLUSTER = HQ_CLUSTER);

	

	
	
	forcase CLUSTERS_DICT {where TEAM_ID = TEAMNO} do
		
		numeric number_of_hh_assigned = countcases(ASSIGNED_HHS_DICT where ACLUSTER = CLUSTERNO);
		numeric number_of_hh_interviews = countcases(HOUSEHOLDLFS_DICT where CLUSTER = CLUSTERNO);
		
		completed_households(hh_ctr,1) = edit("9999",CLUSTERNO);
		completed_households(hh_ctr,2) = edit("99",number_of_hh_assigned);
		completed_households(hh_ctr,3) = edit("9999",number_of_hh_interviews);
		
		hh_ctr = hh_ctr + 1;
	endfor;
	
	//hh_ctr = hh_ctr + 1;
	
	completed_households(hh_ctr,1) = "X";
	completed_households(hh_ctr,2) = "GO BACK";
	
	if duplicates_hh > 1 then
		report_heading = maketext("Cluster %v: %d Assigned Households. Data has duplicates", edit("9999",HQ_CLUSTER),number_of_hh_cases);
	else
		report_heading = maketext("Cluster %v: %d Assigned Households.", edit("9999",HQ_CLUSTER),number_of_hh_cases);
	endif;
	//string report_heading = maketext("Cluster %v: %d Assigned Households.", edit("9999",HQ_CLUSTER),number_of_hh_cases);
	
	numeric sel_hh_row = showarray(report_heading,completed_households,title("CLUSTER","TASKS","HH DONE","IND","CHLD","TUS","STATUS"));


	if completed_households(sel_hh_row,1)= "X" then
		reenter TEAM_MGT;
	endif;

postproc

	if completed_households(sel_hh_row,1)= "X" then
		reenter TEAM_MGT;
	endif;
	
PROC LFS_HH_REPORT



onfocus


	//Loop through already assigned households for a specific interviewer
	numeric hh_ctr = 1;
	numeric duplicates_hh = 0;
	string report_heading;
	
	completed_households.clear();
	numeric number_of_hh_cases = countcases(ASSIGNED_HHS_DICT where HH_CLUSTER = HQ_CLUSTER);

	
	{
	numeric number_of_hh_cases = countcases(ASSIGNED_HHS_DICT where ASSIGN_HH_CLUSTER = HQ_CLUSTER);
	
	//Check for dubplicates in households
	
		do varying numeric dup_ctr = 1 while dup_ctr <= 40
			duplicates_hh = 0;
			forcase HOUSEHOLDLFS_DICT where HOUSEHOLD_CLUSTER = HQ_CLUSTER do
				if HOUSEHOLD_ID = dup_ctr then
					duplicates_hh = duplicates_hh + 1;
					
					if duplicates_hh > 1 then
						break;
					endif;
				endif;
			endfor;
			
			if duplicates_hh > 1 then
				break;
			endif;
		enddo;
		}
	
	
	
	forcase TEAMS_DICT {where TEAM_ID = TEAMNO} do
		forcase ASSIGNED_HHS_DICT(startswith, maketext("%v%v",edit("9999",HQ_CLUSTER),USER_CODE)) do 
			//errmsg("Counter %d", hh_ctr);
			//assigned_hhs.add(AHH_NAME,AHH_NO);
			completed_households(hh_ctr,1) = edit("99",AHH_NO);
			completed_households(hh_ctr,2) = AHH_NAME;
			completed_households(hh_ctr,3) = AHH_LABEL;
			completed_households(hh_ctr,4) = INTRV_NAME;
			
						
			if loadcase(HOUSEHOLDLFS_DICT,edit("9999",HQ_CLUSTER),USER_CODE,edit("99",AHH_NO)) then
				if HH_CONCLUSION = 1 then
					completed_households(hh_ctr,5) = "COMPLETED";
				else
					completed_households(hh_ctr,5) = "PARTIAL";
				endif;	
			else
					completed_households(hh_ctr,5) = "NOT VISITED";
			endif;
			
			hh_ctr = hh_ctr + 1;
		endfor;
	endfor;
	
	//hh_ctr = hh_ctr + 1;
	
	completed_households(hh_ctr,1) = "X";
	completed_households(hh_ctr,2) = "GO BACK";
	
	if duplicates_hh > 1 then
		report_heading = maketext("Cluster %v: %d Assigned Households. Data has duplicates", edit("9999",HQ_CLUSTER),number_of_hh_cases);
	else
		report_heading = maketext("Cluster %v: %d Assigned Households.", edit("9999",HQ_CLUSTER),number_of_hh_cases);
	endif;
	//string report_heading = maketext("Cluster %v: %d Assigned Households.", edit("9999",HQ_CLUSTER),number_of_hh_cases);
	
	numeric sel_hh_row = showarray(report_heading,completed_households,title("NO","HOUSEHOLD","HH LABEL","INTERVIEWER","STATUS"));


	if completed_households(sel_hh_row,1)= "X" then
		reenter TEAM_MGT;
	endif;

postproc

	if completed_households(sel_hh_row,1)= "X" then
		reenter TEAM_MGT;
	endif;
	
