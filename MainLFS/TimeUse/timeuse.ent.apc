{Application 'TIMEUSE' logic file generated by CSPro}
PROC GLOBAL

//national adaptation variables
string country = "[COUNTRY]";

array string labels(100);
array numeric codes(100);
array string codesString(100);
array string dummyCode(2);
array string dummyLabel(2);


//*/VARIABLES FOR WAKE UP TIME TO BE COMPUTED IN THE BACKGROUND*/
string OPS_WU_T;
//*/VARIABLES FOR BED TIME TO BE COMPUTED IN THE BACKGROUND*/
string OPS_BT_T;

//Variables for question text



// Function to require input:
	function NotAllowBlankOtherSpecify(string otherField)
	      if length(strip(otherField)) = 0 then 
	         errmsg("Please enter valid text or make a selection.");
	         reenter;
	      endif;
	end;

{

PROC TIMEUSE_ID

preproc 



{
	// Retreive Region from menu program via pff file parameter
	if sysparm("TO_TIMEUSE_ID") <> "" then
		$ = tonumber(sysparm("TO_TIMEUSE_ID"));	

		// Make field protected so that it cannot be modified by
		// interviewer
		setproperty($, "Protected", "Yes");
	endif;	
}

}

{

PROC TU_PPNO

preproc
	$=1;
	setproperty($, "Protected", "Yes");

}

PROC TIMEUSE_FF


PROC TCLUSTER

preproc

	if sysparm("TCLUSTER") <> "" then
		$ = tonumber(sysparm("TCLUSTER"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;	
PROC TGHINTID


preproc

	if sysparm("TGHINTID") <> "" then
		$ = sysparm("TGHINTID");

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;
PROC TGHHHNO

preproc

	if sysparm("TGHHHNO") <> "" then
		$ = tonumber(sysparm("TGHHHNO"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;
PROC TPPNO

preproc

	if sysparm("THMPPNO") <> "" then
		$ = tonumber(sysparm("THMPPNO"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;


PROC PREV_WEEK_DAY

preproc

	if PREV_WEEK_DAY = "" then
		PREV_WEEK_DAY = timestring("%A",(timestamp()-86400));
	endif;
	
PROC TU_START_TIME

preproc
	
	if TU_START_TIME = notappl then
		TU_START_TIME = timestamp();
	endif;
	
PROC TIMEUSE_REC000

PROC OPS_TSS

preproc


do numeric i = totocc(TIMEUSE_REC000) until i = 1 by -1 
		if  OPS_TSE_C(i) = 96 then 
			endgroup;
			break;
		endif;
	enddo;


if visualvalue($) = notappl then
$ = 1;
noinput;
else noinput;
endif;




PROC OPS_TSE

preproc

$ = OPS_TSS;
noinput;

PROC BLOCK000

preproc

onfocus

// Set the occurrence labels in the case tree to the time slots
setocclabel(TIMEUSE_REC000(curocc()), maketext("%s-%s", getvaluelabel(OPS_TSS), getvaluelabel(OPS_TSE)));

{if visualvalue(OPS_TSE_C) = notappl then
OPS_TSE_C = OPS_TSS;
endif;}


//limit the time slot selection
valueset numeric OPS_TSE_C_VS2;

do numeric codesTU = OPS_TSS while codesTU in OPS_TSS:96
	OPS_TSE_C_VS2.add(getlabel(OPS_TSE_VS1, codesTU), codesTU);
enddo;

setvalueset(OPS_TSE_C, OPS_TSE_C_VS2);

postproc

{if OPS_TSS = 1 and OPS_TSS_C <> 1 then
errmsg("Please enter a valid time! The first activity has to start at 4:00 in the morning.");
OPS_TSS_C = OPS_TSS ;
reenter;
else OPS_TSS= OPS_TSS_C;
endif;
}

{ if OPS_TSS > 1 then
	if OPS_TSS_C <= OPS_TSE(curocc()-1) then
	warning("Warning: Time for this activity overlaps with the previous one.")
	//OPS_TSS_C = OPS_TSS;
	select("Confirm entry", continue, "Re-enter", OPS_TSS_C, "Correct previous entry", OPS_TSS_C(curocc()-1));
	endif;
endif;
}

{
if OPS_TSS_C > OPS_TSE_C then
	errmsg("Please enter a valid time! The activity Start time can not be after the End time.");
	reenter;
else 
	OPS_TSE = OPS_TSE_C;
	OPS_TSS (curocc()+1) = OPS_TSE_C + 1;
endif;
}

// Set the occurrence labels in the case tree to the time slots
setocclabel(TIMEUSE_REC000(curocc()), maketext("%s-%s %s", getvaluelabel(OPS_TSS), getvaluelabel(OPS_TSE_C), getvaluelabel(OPS_1)[5]));

PROC OPS_1

PROC OPS_TSE_C


postproc

if OPS_TSS > OPS_TSE_C then
	errmsg("Please enter a valid time! The activity Start time can not be after the End time.");
	reenter;
endif;

if  OPS_TSE_C <> 96 then 
	OPS_TSE = OPS_TSE_C;
	OPS_TSS (curocc()+1) = OPS_TSE_C + 1;
else
	OPS_TSE = OPS_TSE_C;

endif;

PROC OPS_1_OTH

preproc ask if OPS_1 = 42;

if OPS_1 = 42 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC OPS_TT

preproc

if OPS_TSE_C <> notappl then 

OPS_TT = ((OPS_TSE_C - OPS_TSS) * 15) + 15;

else 

$ = notappl;
noinput;

endif;
PROC OPS_CHK

preproc ask if curocc()=1 and OPS_1<>1;

postproc

if $<>"9977" then
		if not regexmatch($, "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$") then
		 errmsg("Invalid entry! Please enter time in the HH:MM format");
		 reenter;
		endif;
endif;
PROC OPS_2

preproc ask if OPS_1 <> 97;

if OPS_1 = 41 then 
	OPS_2 = 8;
	noinput;
endif;

onfocus
if curocc() = 1 or OPS_1 = 41 then
	setvalueset($, OPS_2_VS1);
	elseif OPS_2(curocc()-1) in notappl, 8 then setvalueset($, OPS_2_VS1);
	else setvalueset($, OPS_2_VS2);
endif;

postproc 

if curocc()>1 and $<>8 and $<>99 then 
	if OPS_2 (curocc()) <> OPS_2 (curocc()-1) and OPS_2 (curocc()-1) <> 8 and not(OPS_2(curocc()-1) = notappl) then
		errmsg("Warning: Change in location from one activity to another without intervening travel time specified. Please enter a valid value or NO CHANGE IN LOCATION SINCE PRIOR ACTIVITY.");
		reenter;
	endif;	
endif;
PROC OPS_2_OTH

preproc ask if OPS_2 = 9;

if OPS_2 = 9 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);

if curocc()>1 then
	if $ (curocc()) <> $ (curocc()-1) then
		errmsg("Warning: Change in location from one activity to another without intervening travel time specified. Please enter a valid value or NO CHANGE IN LOCATION SINCE PRIOR ACTIVITY.");
		reenter;
	endif;	
endif;
PROC OPS_2A

preproc ask if OPS_1 = 41;


PROC OPS_2A_OTH

preproc ask if OPS_2A = 16;

if OPS_2A = 16 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC OPS_3

preproc ask if (not(OPS_1 in 1, 97, 41) and OPS_2 <> 8) or (OPS_1=41 OR OPS_2=8);

onfocus
if curocc()=1 then
	setvalueset($, OPS_3_VS1);
	elseif not(highlighted(OPS_3(curocc()-1))) then setvalueset($, OPS_3_VS1);
	else setvalueset($, OPS_3_VS2);
endif;

Postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);

if ischecked ("01", $) and $ <> "01" then errmsg("Please enter a valid value! ALONE cannot be marked together with other options.");
reenter;
endif;

if ischecked ("99", $) and $ <> "99" then errmsg("Please enter a valid value! NO CHANGE IN PERSONS PRESENT SINCE PRIOR ACTIVITY cannot be marked together with other options.");
reenter;
endif;

//IF OPS_1 = 13 – 17 AND OPS_3 DOES NOT INCLUDE ANY OF 05-08. ACTIVATE PROMPT: “CHILDCARE ACTIVITY REPORTED: CONFIRM CHILD(REN) CO-PRESENT”. 

IF OPS_1 in 13:17 AND (not(ischecked("05",OPS_3)) and not(ischecked("06",OPS_3)) and not(ischecked("07",OPS_3)) and not(ischecked("08",OPS_3)) and not(ischecked("99",OPS_3))) then 
	warning("CHILDCARE ACTIVITY REPORTED: CONFIRM CHILD(REN) CO-PRESENT")
	select("Reenter", reenter, "Continue", continue);
endif;

numeric sk;

do numeric skn = 1 while skn < curocc();
		if not(ischecked("99",OPS_3(skn))) then
			sk=skn;
		endif;
	enddo;

IF curocc()>1 and OPS_1 in 13:17 and ischecked("99",OPS_3) 
				and not(ischecked("05",OPS_3(sk))) 
				and not(ischecked("06",OPS_3(sk))) 
				and not(ischecked("07",OPS_3(sk)))
				and not(ischecked("08",OPS_3(sk))) then 
		warning("CHILDCARE ACTIVITY REPORTED: CONFIRM CHILD(REN) CO-PRESENT")
		select("Reenter", reenter, "Continue", continue);
endif;
PROC OPS_3A

preproc ask if ischecked("05",OPS_3) or ischecked("06",OPS_3) or ischecked("07", OPS_3);
PROC OPS_4

preproc

ask if OPS_1 in 4:12, 13:17, 18, 19, 26:33;

onfocus

if OPS_1 in 13:17 then
	if curocc() = 1 then
		setvalueset($, OPS_4_VS3);
		elseif OPS_4(curocc()-1)=notappl then setvalueset($, OPS_4_VS3);
		else setvalueset($, OPS_4_VS4);
	endif;
else
	if curocc() = 1 then
		setvalueset($, OPS_4_VS1);
		elseif OPS_4(curocc()-1)=notappl then setvalueset($, OPS_4_VS1);
		else setvalueset($, OPS_4_VS2);
	endif;	
endif;
	



PROC OPS_4_OTH

preproc ask if OPS_4=16;

if OPS_4=16 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC OPS_5

preproc ask if OPS_1 in 5,26:33 and not(OPS_4 in 10:16);

PROC RSC_1

postproc 

	if RSC_1 = 2 then skip to RSC_4;
	endif;
PROC RSC_2

preproc ASK IF RSC_1 = 1;

onfocus

valueset string RSC_2_VS;

for numeric codesTU in TIMEUSE_REC000 do
	if not(OPS_1(codesTU) in 13:17) then  
		RSC_2_VS.add(getvaluelabel(OPS_1(codesTU))[5] + maketext(" (%s-%s)", getvaluelabel(OPS_TSS(codesTU)), getvaluelabel(OPS_TSE(codesTU))), maketext("%02d",codesTU));
	endif;
endfor;

setvalueset(RSC_2, RSC_2_VS);

setproperty($,"CaptureType", "CheckBox"); 

{
numeric i;
do i = 1 while i <= totocc(TIMEUSE_REC000)
	labels(i) = getvaluelabel(OPS_1(i))[5] + maketext(" (%s-%s)", getvaluelabel(OPS_TSS_C(i)), getvaluelabel(OPS_TSE_C(i))) ;
	codesString(i) = maketext("%02d",OPS_1(i));
enddo;
codesString(i) = "";
setvalueset(RSC_2, codesString, labels);

setcapturetype(RSC_2, 2);

}

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC RECOVERY_ROSTER_1000

preproc ASK IF RSC_1 = 1;


numeric ind;

	do numeric i = 1 while i <= 96;
		string codeString = edit("99", i);
		if ischecked(codeString,RSC_2) then
			inc(ind);
			RSC_1A_TSS(ind) = OPS_TSS(tonumber(codeString));
			RSC_1A_TSE(ind)	= OPS_TSE(tonumber(codeString));
			RSC_1A(ind) = OPS_1(tonumber(codeString));
					
		endif;
	enddo;




PROC RSC_1A

Postproc

setocclabel(RECOVERY_ROSTER_1000(curocc()), maketext("%s-%s %s", getvaluelabel(RSC_1A_TSS), getvaluelabel(RSC_1A_TSE), getvaluelabel(RSC_1A)));

{
    do numeric ctr = 1 while ctr <=totocc(RECOVERY_ROSTER_1000)
        //setocclabel(RECOVERY_ROSTER_1000(ctr), maketext("%s", getvaluelabel(RSC_1A(ctr))));
		setocclabel(RECOVERY_ROSTER_1000(ctr), maketext("%s-%s %s", getvaluelabel(RSC_1A_TSS(ctr)), getvaluelabel(RSC_1A_TSE(ctr)), getvaluelabel(RSC_1A(ctr))));
    enddo;
	}
PROC RSC_2A

preproc

onfocus 

valueset string RSC_2A_VS;

numeric codesTU;

do codesTU = RSC_1A_TSS while codesTU in RSC_1A_TSS:RSC_1A_TSE
	RSC_2A_VS.add(getlabel(OPS_TSS_VS1, codesTU) + " - " + getlabel(OPS_TSE_VS1, codesTU), edit("99", codesTU));
enddo;

	setvalueset($, RSC_2A_VS);

if RSC_2A_VS.length()=1 then
	
	RSC_2A=edit("99", codesTU-1);
	noinput;
	
	else 
		RSC_2A_VS.add("Continuous", "97");
		setvalueset($, RSC_2A_VS);
		setproperty($,"CaptureType", "CheckBox");
endif;

postproc 

if ischecked ("97", $) and $ <> "97" then 
	errmsg("Please enter a valid value! CONTINUOUS cannot be marked together with other options.");
	reenter;
endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);

//End roster
if curocc() = length(strip(RSC_2))/2 then endgroup;
endif;
PROC RSC_3

onfocus

{if curocc()=1 then
	setvalueset($, RSC_3_VS1);
	//elseif not(highlighted(RSC_3(curocc()-1))) then setvalueset($, RSC_3_VS1);
	else setvalueset($, RSC_3_VS2);
endif;}

Postproc


if ischecked ("99", $) and $ <> "99" then errmsg("Please enter a valid value! NO CHANGE SINCE PRIOR RESPONCE cannot be marked together with other options.");
reenter;
endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);


PROC RSC_5

preproc ASK IF RSC_4 = 1;

onfocus

valueset string RSC_5_VS;

for numeric codesTU in TIMEUSE_REC000 do
	if not(OPS_1(codesTU) in 18:19) then
		RSC_5_VS.add(getvaluelabel(OPS_1(codesTU))[5] + maketext(" (%s-%s)", getvaluelabel(OPS_TSS(codesTU)), getvaluelabel(OPS_TSE(codesTU))), maketext("%02d",codesTU));
	endif;
endfor;

setvalueset(RSC_5, RSC_5_VS);

setproperty($,"CaptureType", "CheckBox"); 


postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC RECOVERY_ROSTER_2000

preproc 

ASK IF RSC_4 = 1;

numeric ind;

	do numeric i = 1 while i <= 96;
	string codeString = edit("99", i);
		if ischecked(codeString,RSC_5) then
			inc(ind);
			RSC_1B_TSS(ind) = OPS_TSS(tonumber(codeString));
			RSC_1B_TSE(ind)	= OPS_TSE(tonumber(codeString));
			RSC_1B(ind) = OPS_1(tonumber(codeString));
					
		endif;
	enddo;
PROC RSC_1B

Postproc

setocclabel(RECOVERY_ROSTER_2000(curocc()), maketext("%s-%s %s", getvaluelabel(RSC_1B_TSS), getvaluelabel(RSC_1B_TSE), getvaluelabel(RSC_1B)));
PROC RSC_5A

preproc

onfocus 

valueset string RSC_5A_VS;

numeric codesTU;

do codesTU = RSC_1B_TSS while codesTU in RSC_1B_TSS:RSC_1B_TSE
	RSC_5A_VS.add(getlabel(OPS_TSS_VS1, codesTU) + " - " + getlabel(OPS_TSE_VS1, codesTU), edit("99", codesTU));
enddo;

	setvalueset($, RSC_5A_VS);

if RSC_5A_VS.length()=1 then
	
	$=edit("99", codesTU-1);
	noinput;
	
	else 
		RSC_5A_VS.add("Continuous", "97");
		setvalueset($, RSC_5A_VS);
		setproperty($,"CaptureType", "CheckBox");
endif;

postproc 

if ischecked ("97", $) and $ <> "97" then 
	errmsg("Please enter a valid value! CONTINUOUS cannot be marked together with other options.");
	reenter;
endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);

//End roster
if curocc() = length(strip(RSC_5))/2 then endgroup;
endif;
PROC RSC_6

preproc ASK IF RSC_4 = 1;

onfocus

{if curocc()=1 then
	setvalueset($, RSC_6_VS1);
	else setvalueset($, RSC_6_VS2);
endif;}

Postproc

if ischecked ("99", $) and $ <> "99" then errmsg("Please enter a valid value! NO CHANGE SINCE PRIOR RESPONCE cannot be marked together with other options.");
reenter;
endif;


// Validate that field is not blank
NotAllowBlankOtherSpecify($);

PROC TPL_1A

Postproc

if ischecked ("11", $) and $ <> "11" then 
	errmsg("Please enter a valid value! NO cannot be marked together with other options.");
	reenter;
endif;


// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TPL_1A_OTH

preproc ask if ischecked ("09", TPL_1A);

if ischecked("09", TPL_1A) then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TPL_1B

preproc ask if ischecked("07", TPL_1A);

postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TAW_1

postproc

if $<>"97" then
	if not regexmatch($, "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$") then
			 errmsg("Invalid entry! Please enter time in the HH:MM format or 97 for DON’T KNOW");
			 reenter;
	endif;
endif;
PROC TAW_1_ACTUAL

preproc 									
									
// Do not overwrite the time if modifying the case									
if length(strip($)) = 0 then									
   $ = maketext("%s:%s",edit("99",systime("HH")),edit("99",systime("MM")));										
   noinput;									
endif;		
PROC TAW_2

preproc ask if TAW_1 = "97";

postproc

if $<>"97" then
	if not regexmatch($, "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$") then
			 errmsg("Invalid entry! Please enter time in the HH:MM format or 97 for DON’T KNOW");
			 reenter;
	endif;
endif;
PROC TAW_3

preproc ask if TAW_1 <> "97" OR TAW_2 <> "97";
PROC TAW_3_OTH

preproc ask if TAW_3 = 7;

if TAW_3 = 7 then
	setproperty($,"HideInCaseTree", "No");
endif;


postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TUS_END

	
preproc
	
	if TU_ENDTIME = notappl then
		TU_ENDTIME = timestamp();
	endif;
