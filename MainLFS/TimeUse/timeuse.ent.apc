{Application 'TIMEUSE' logic file generated by CSPro}
PROC GLOBAL

//National adaption variables
string country="Malawi";

//Question text variables
string secondary_activity;

//Variables for calculations
array string labels(100);
array numeric codes(100);
array string codesString(100);
array string dummyCode(2);
array string dummyLabel(2);
numeric rosterSize;
numeric probe=0;


//*/VARIABLES FOR WAKE UP TIME TO BE COMPUTED IN THE BACKGROUND*/
string LDB_WU_T;
//*/VARIABLES FOR BED TIME TO BE COMPUTED IN THE BACKGROUND*/
string LDB_BT_T;


// Function to require input:
	function NotAllowBlankOtherSpecify(string otherField)
	      if length(strip(otherField)) = 0 then 
	         errmsg("Please enter valid text or make a selection!");
	         reenter;
	      endif;
	end;


PROC TIMEUSE_FF


PROC TCLUSTER

preproc

	if sysparm("TCLUSTER") <> "" then
		$ = tonumber(sysparm("TCLUSTER"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;
PROC TU_PPNO

preproc
	$=1;
	setproperty($, "Protected", "Yes");
PROC TGHINTCODE


preproc

	if sysparm("TGHINTCODE") <> "" then
		$ = sysparm("TGHINTCODE");

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;
PROC TGHHHNO

preproc

	if sysparm("TGHHHNO") <> "" then
		$ = tonumber(sysparm("TGHHHNO"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;
PROC THMPPNO

preproc

	if sysparm("THMPPNO") <> "" then
		$ = tonumber(sysparm("THMPPNO"));

		// Make field protected so that it cannot be modified by interviewer
		setproperty($, "Protected", "Yes");
		noinput;
	endif;
PROC TIMEUSE_REC000

PROC LDB_TSS

preproc

if totocc(TIMEUSE_REC000)=2 and LDB_TSE_C(1)=96 then endgroup;
endif;

do numeric i = totocc(TIMEUSE_REC000) until i = 1 by -1 
		if  LDB_TSE_C(i) = 96 then 
			endgroup;
			break;
		endif;
	enddo;


if visualvalue($) = notappl then
$ = 1;
noinput;
else noinput;
endif;




PROC LDB_TSE

preproc

$ = LDB_TSS;
noinput;

PROC BLOCK000

preproc

onfocus

// Set the occurrence labels in the case tree to the time slots
setocclabel(TIMEUSE_REC000(curocc()), maketext("%s-%s", getvaluelabel(LDB_TSS), getvaluelabel(LDB_TSE)));

{if visualvalue(LDB_TSE_C) = notappl then
LDB_TSE_C = LDB_TSS;
endif;}

//limit the time slot selection
valueset numeric LDB_TSE_C_VS2;

do numeric codesTU = LDB_TSS while codesTU in LDB_TSS:96
	LDB_TSE_C_VS2.add(getlabel(LDB_TSE_VS1, codesTU), codesTU);
enddo;

setvalueset(LDB_TSE_C, LDB_TSE_C_VS2);


postproc

{if LDB_TSS = 1 and LDB_TSS_C <> 1 then
errmsg("Please enter a valid time! The first activity has to start at 4:00 in the morning.");
LDB_TSS_C = LDB_TSS ;
reenter;
else LDB_TSS= LDB_TSS_C;
endif;
}

{ if LDB_TSS > 1 then
	if LDB_TSS_C <= LDB_TSE(curocc()-1) then
	warning("Warning: Time for this activity overlaps with the previous one.")
	//LDB_TSS_C = LDB_TSS;
	select("Confirm entry", continue, "Re-enter", LDB_TSS_C, "Correct previous entry", LDB_TSS_C(curocc()-1));
	endif;
endif;
}

{
if LDB_TSS_C > LDB_TSE_C then
	errmsg("Please enter a valid time! The activity Start time can not be after the End time.");
	reenter;
else 
	LDB_TSE = LDB_TSE_C;
	LDB_TSS (curocc()+1) = LDB_TSE_C + 1;
endif;
}

// Set the occurrence labels in the case tree to the time slots
setocclabel(TIMEUSE_REC000(curocc()), maketext("%s-%s %s", getvaluelabel(LDB_TSS), getvaluelabel(LDB_TSE_C), getvaluelabel(LDB_1)[5]));

PROC LDB_1

PROC LDB_TSE_C

postproc

//validate input
if LDB_TSS > LDB_TSE_C then
	errmsg("Please enter a valid time! The activity START time can not be after the END time.");
	reenter;
endif;

//set time for next activity
if  LDB_TSE_C <> 96 then 
	LDB_TSE = LDB_TSE_C;
	LDB_TSS (curocc()+1) = LDB_TSE_C + 1;
else
	LDB_TSE = LDB_TSE_C;
endif;

PROC LDB_1_OTH

preproc ask if LDB_1 = 41;

//show variable in the case tree
if LDB_1 = 41 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_TT

preproc

//calculate activity's total time (in minutes)
if LDB_TSE_C <> notappl then 

LDB_TT = ((LDB_TSE_C - LDB_TSS) * 15) + 15;

else 

$ = notappl;
noinput;

endif;
PROC LDB_CHK

preproc ask if curocc()=1 and LDB_1<>1;

postproc

if $<>"9977" then
		if not regexmatch($, "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$") then
		 errmsg("Invalid entry! Please enter time in the HH:MM format");
		 reenter;
		endif;
endif;
PROC LDB_1B

preproc ask if LDB_1 > 1;

onfocus 
	
	//exclude main activity from the dropdown list
	valueset string LDB_1B_VS = LDB_1B_VS1;
	
	LDB_1B_VS.remove(edit("99", LDB_1));
	
	setvalueset($,LDB_1B_VS);

postproc 

if ischecked ("42", $) and $ <> "42" then 
	errmsg("Please enter a valid value! NOTHING ELSE cannot be marked together with other options.");
	reenter;
endif;

if ischecked ("97", $) and $ <> "97" then 
	errmsg("Please enter a valid value! DON’T KNOW cannot be marked together with other options.");
	reenter;
endif;

	if ischecked ("42", $) and probe<>1 then
		probe=1;
		warning("For instance, were you talking with a family member, friend, or neighbour, or [looking after | minding | keeping an eye on] a child, or eating a snack, or listening to the radio, or watching television…")
		select("Reenter", reenter, "NOTHING ELSE", continue);
	endif;
	
	if ischecked ("97", $) and probe<>1 then
		probe=1;
		warning("For instance, were you talking with a family member, friend, or neighbour, or [looking after | minding | keeping an eye on] a child, or eating a snack, or listening to the radio, or watching television…")
		select("Reenter", reenter, "DON’T KNOW", continue);
	endif;



// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_1B_OTH

preproc ask if ischecked ("41", LDB_1B);

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_1B_T000


preproc ask if LDB_1 > 1 and not(ischecked ("42", LDB_1B)) and not(ischecked ("97", LDB_1B));

onfocus

numeric ind;

	do numeric i = 1 while i <= 41;
		string codeString = edit("99", i);
		if ischecked(codeString,LDB_1B) then
	
		inc(ind);
		
		setocclabel(LDB_1B_T000(ind), maketext("%s", getlabel(LDB_1, i)));
		
		endif;
	enddo;

PROC LDB_1B_T

preproc ask if LDB_1 > 1 and not(ischecked ("42", LDB_1B)) and not(ischecked ("97", LDB_1B));

onfocus
	
	valueset string LDB_1B_T_VS;

	do numeric codesTU = LDB_TSS while codesTU in LDB_TSS:LDB_TSE
		LDB_1B_T_VS.add(getlabel(LDB_TSS_VS1, codesTU) + " - " + getlabel(LDB_TSE_VS1, codesTU), edit("99", codesTU));
	enddo;

	LDB_1B_T_VS.add("Continuous", "97");

	setvalueset(LDB_1B_T, LDB_1B_T_VS);

	setproperty(LDB_1B_T,"CaptureType", "CheckBox"); 


postproc 

	if ischecked ("97", $) and $ <> "97" then 
		errmsg("Please enter a valid value! CONTINUOUS cannot be marked together with other options.");
		reenter;
	endif;
	
	
	// Validate that field is not blank
	if length(strip($)) = 0 then 
	         ERRMSG("Please select the time slots for each secondary activity in the order it was presented");
	         reenter;
	endif;

	if curocc(LDB_1B_T000) = length(strip(LDB_1B))/2 then endgroup;
	endif;
	
PROC LDB_2

preproc ask if LDB_1 <> 97;

if LDB_1 = 40 then 
	LDB_2 = 8;
	noinput;
endif;

onfocus
if curocc() = 1 or LDB_1 = 40 then
	setvalueset($, LDB_2_VS1);
	elseif LDB_2(curocc()-1) in notappl, 8 then setvalueset($, LDB_2_VS1);
	else setvalueset($, LDB_2_VS2);
endif;

postproc 

if curocc()>1 and $<>8 and $<>99 then 
	if LDB_2 (curocc()) <> LDB_2 (curocc()-1) and LDB_2 (curocc()-1) <> 8 and not(LDB_2(curocc()-1) = notappl) then
		errmsg("Warning: Change in location from one activity to another without intervening travel time specified. Please enter a valid value or NO CHANGE IN LOCATION SINCE PRIOR ACTIVITY.");
		reenter;
	endif;	
endif;

PROC LDB_2_OTH

preproc ask if LDB_2 = 10;

if LDB_2 = 10 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_2A

preproc ask if LDB_1 = 40;
PROC LDB_2A_OTH

preproc ask if LDB_2A = 11;

if LDB_2A = 11 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_3

preproc ask if (not(LDB_1 in 1, 97, 40) and LDB_2 <> 8) or (not(LDB_1 in 1, 97) and LDB_1=40 and LDB_2=8);

onfocus
if curocc()=1 then
	setvalueset($, LDB_3_VS1);
	elseif not(highlighted(LDB_3(curocc()-1))) then setvalueset($, LDB_3_VS1);
	else setvalueset($, LDB_3_VS2);
endif;

Postproc

if ischecked ("01", $) and $ <> "01" then errmsg("Please enter a valid value! ALONE cannot be marked together with other options.");
reenter;
endif;

if ischecked ("99", $) and $ <> "99" then errmsg("Please enter a valid value! NO CHANGE IN PERSONS PRESENT SINCE PRIOR ACTIVITY cannot be marked together with other options.");
reenter;
endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_3A

preproc ask if ischecked("06",LDB_3) or ischecked("07", LDB_3) or ischecked("08", LDB_3);
PROC LDB_4

preproc

ask if LDB_1 in 4:19,21,24:32,41 OR LDB_2A in 3,4,8,9;

onfocus 
if curocc() = 1 then
	setvalueset($, LDB_4_VS1);
	elseif LDB_4(curocc()-1)=notappl then setvalueset($, LDB_4_VS1);
	else setvalueset($, LDB_4_VS2);
endif;

PROC LDB_4_OTH

preproc ask if LDB_4 = 16;

if LDB_4 = 16 then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC LDB_4A

preproc ask if LDB_4 in 6,7,8;
PROC LDB_5

preproc ask if LDB_1 in 5,26:32,41 and not(LDB_4 in 10,11,12);
PROC LDB_6000

preproc

onfocus

numeric ind;

	do numeric i = 1 while i <= 41
			string codeString = edit("99", i);
			if ischecked(codeString,LDB_1B) then
				inc(ind);
				setocclabel(LDB_6000(ind), maketext("%s", getlabel(LDB_1, i)));
		endif;
	enddo;

PROC LDB_6

preproc ASK IF highlighted(LDB_1B) and (tonumber(LDB_1B[(curocc()*2-1):2]) in 4:19, 21, 24:32, 41);

onfocus 
if curocc() = 1 then
	setvalueset($, LDB_6_VS1);
	elseif $(curocc()-1)=notappl then setvalueset($, LDB_6_VS1);
	else setvalueset($, LDB_6_VS2);
endif;

postproc

	if curocc(LDB_6A000) = length(strip(LDB_1B))/2 then endgroup;
	endif;
PROC LDB_6A000

onfocus

numeric ind;

	do numeric i = 1 while i <= 41
			string codeString = edit("99", i);
			if ischecked(codeString,LDB_1B) then
				inc(ind);
				setocclabel(LDB_6A000(ind), maketext("%s", getlabel(LDB_1, i)));
		endif;
	enddo;
PROC LDB_6A

preproc ask if LDB_6(curocc()) in 6,7,8;

postproc

	if curocc(LDB_6A000) = length(strip(LDB_1B))/2 then endgroup;
	endif;
PROC LDB_7000

preproc

onfocus

numeric ind;

	do numeric i = 1 while i <= 41
			string codeString = edit("99", i);
			if ischecked(codeString,LDB_1B) then
				inc(ind);
				setocclabel(LDB_7000(ind), maketext("%s", getlabel(LDB_1, i)));
		endif;
	enddo;

PROC LDB_7

preproc ask if highlighted(LDB_1B) and (tonumber(LDB_1B[(curocc()*2-1):2]) in 5, 26:32, 41);

//onfocus secondary_activity=maketext("%s", getlabel(LDB_1, tonumber(getocclabel()))[5]);

postproc


	//if curocc(LDB_7000) = rosterSize then endgroup;
	if curocc(LDB_7000) = length(strip(LDB_1B))/2 then endgroup;
	endif;
PROC RSB_2

preproc ASK IF RSB_1 = 1;

onfocus

valueset string RSB_2_VS;

for numeric codesTU in TIMEUSE_REC000 do
RSB_2_VS.add(getvaluelabel(LDB_1(codesTU))[5] + maketext(" (%s-%s)", getvaluelabel(LDB_TSS(codesTU)), getvaluelabel(LDB_TSE(codesTU))), maketext("%02d",codesTU));
endfor;

setvalueset(RSB_2, RSB_2_VS);

setproperty($,"CaptureType", "CheckBox"); 

{
numeric i;
do i = 1 while i <= totocc(TIMEUSE_REC000)
	labels(i) = getvaluelabel(LDB_1(i))[5] + maketext(" (%s-%s)", getvaluelabel(LDB_TSS_C(i)), getvaluelabel(LDB_TSE_C(i))) ;
	codesString(i) = maketext("%02d",LDB_1(i));
enddo;
codesString(i) = "";
setvalueset(RSB_2, codesString, labels);

setcapturetype(RSB_2, 2);

}

postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC RECOVERY_ROSTER_1000

preproc ASK IF highlighted(RSB_2);


numeric ind;

	do numeric i = 1 while i <= 96;
		string codeString = edit("99", i);
		if ischecked(codeString,RSB_2) then
			inc(ind);
			RSB_1A_TSS(ind) = LDB_TSS(tonumber(codeString));
			RSB_1A_TSE(ind)	= LDB_TSE(tonumber(codeString));
			RSB_1A(ind) = LDB_1(tonumber(codeString));
					
		endif;
	enddo;




PROC RSB_1A

Postproc

setocclabel(RECOVERY_ROSTER_1000(curocc()), maketext("%s-%s %s", getvaluelabel(RSB_1A_TSS), getvaluelabel(RSB_1A_TSE), getvaluelabel(RSB_1A)));

{
    do numeric ctr = 1 while ctr <=totocc(RECOVERY_ROSTER_1000)
        //setocclabel(RECOVERY_ROSTER_1000(ctr), maketext("%s", getvaluelabel(RSB_1A(ctr))));
		setocclabel(RECOVERY_ROSTER_1000(ctr), maketext("%s-%s %s", getvaluelabel(RSB_1A_TSS(ctr)), getvaluelabel(RSB_1A_TSE(ctr)), getvaluelabel(RSB_1A(ctr))));
    enddo;
	}
PROC RSB_2A

preproc

onfocus 

valueset string RSB_2A_VS;

numeric codesTU;

do codesTU = RSB_1A_TSS while codesTU in RSB_1A_TSS:RSB_1A_TSE
	RSB_2A_VS.add(getlabel(LDB_TSS_VS1, codesTU) + " - " + getlabel(LDB_TSE_VS1, codesTU), edit("99", codesTU));
enddo;

	setvalueset($, RSB_2A_VS);

if RSB_2A_VS.length()=1 then
	
	RSB_2A=edit("99", codesTU-1);
	noinput;
	else 
		RSB_2A_VS.add("Continuous", "97");
		setvalueset($, RSB_2A_VS);
		setproperty($,"CaptureType", "CheckBox");
endif;

postproc 

if ischecked ("97", $) and $ <> "97" then 
	errmsg("Please enter a valid value! CONTINUOUS cannot be marked together with other options.");
	reenter;
endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC RSB_3

onfocus

if curocc()=1 then
	setvalueset($, RSB_3_VS1);
	//elseif not(highlighted(RSB_3(curocc()-1))) then setvalueset($, RSB_3_VS1);
	else setvalueset($, RSB_3_VS2);
endif;

Postproc

if ischecked ("99", $) and $ <> "99" then errmsg("Please enter a valid value! NO CHANGE SINCE PRIOR RESPONCE cannot be marked together with other options.");
reenter;
endif;


// Validate that field is not blank
NotAllowBlankOtherSpecify($);

PROC RSB_3A

preproc ask if RSB_3 <> "99";

postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);

if curocc() = length(strip(RSB_2))/2 then endgroup;
endif;
PROC RSB_5

preproc ASK IF RSB_4 = 1;

onfocus

valueset string RSB_5_VS;

for numeric codesTU in TIMEUSE_REC000 do
RSB_5_VS.add(getvaluelabel(LDB_1(codesTU))[5] + maketext(" (%s-%s)", getvaluelabel(LDB_TSS(codesTU)), getvaluelabel(LDB_TSE(codesTU))), maketext("%02d",codesTU));
endfor;

setvalueset(RSB_5, RSB_5_VS);

setproperty($,"CaptureType", "CheckBox"); 


postproc 

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC RECOVERY_ROSTER_2000

preproc 

ASK IF highlighted(RSB_5);

numeric ind;

	do numeric i = 1 while i <= 96;
	string codeString = edit("99", i);
		if ischecked(codeString,RSB_5) then
			inc(ind);
			RSB_1B_TSS(ind) = LDB_TSS(tonumber(codeString));
			RSB_1B_TSE(ind)	= LDB_TSE(tonumber(codeString));
			RSB_1B(ind) = LDB_1(tonumber(codeString));
					
		endif;
	enddo;
PROC RSB_1B

Postproc

setocclabel(RECOVERY_ROSTER_2000(curocc()), maketext("%s-%s %s", getvaluelabel(RSB_1B_TSS), getvaluelabel(RSB_1B_TSE), getvaluelabel(RSB_1B)));
PROC RSB_5A

preproc

onfocus 

valueset string RSB_5A_VS;

numeric codesTU;

do codesTU = RSB_1B_TSS while codesTU in RSB_1B_TSS:RSB_1B_TSE
	RSB_5A_VS.add(getlabel(LDB_TSS_VS1, codesTU) + " - " + getlabel(LDB_TSE_VS1, codesTU), edit("99", codesTU));
enddo;

	setvalueset($, RSB_5A_VS);

if RSB_5A_VS.length()=1 then
	
	$=edit("99", codesTU-1);
	noinput;
	
	else 
		RSB_5A_VS.add("Continuous", "97");
		setvalueset($, RSB_5A_VS);
		setproperty($,"CaptureType", "CheckBox");
endif;

postproc 

if ischecked ("97", $) and $ <> "97" then 
	errmsg("Please enter a valid value! CONTINUOUS cannot be marked together with other options.");
	reenter;
endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);


PROC RSB_6

onfocus

if curocc()=1 then
	setvalueset($, RSB_6_VS1);
	else setvalueset($, RSB_6_VS2);
endif;

Postproc

if ischecked ("99", $) and $ <> "99" then errmsg("Please enter a valid value! NO CHANGE SINCE PRIOR RESPONCE cannot be marked together with other options.");
reenter;
endif;

if curocc() = length(strip(RSB_5))/2 then endgroup;endif;

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TPL_1A

Postproc

if ischecked ("11", $) and $ <> "11" then 
	errmsg("Please enter a valid value! NO cannot be marked together with other options.");
	reenter;
endif;


// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TPL_1A_OTH

preproc ask if ischecked ("10", TPL_1A);

if ischecked("10", TPL_1A) then
	setproperty($,"HideInCaseTree", "No");
endif;

postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TPL_1B

preproc ask if ischecked("7", TPL_1A);

postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
PROC TAW_1

postproc

if $<>"97" then
	if not regexmatch($, "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$") then
			 errmsg("Invalid entry! Please enter time in the HH:MM format or 97 for DON’T KNOW");
			 reenter;
	endif;
endif;
PROC TAW_1_ACTUAL

preproc 									
									
// Do not overwrite the time if modifying the case									
if length(strip($)) = 0 then									
   $ = maketext("%s:%s",edit("99",systime("HH")),edit("99",systime("MM")));										
   noinput;									
endif;		
PROC TAW_2

preproc ask if TAW_1 = "97";

postproc

if $<>"97" then
	if not regexmatch($, "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$") then
			 errmsg("Invalid entry! Please enter time in the HH:MM format or 97 for DON’T KNOW");
			 reenter;
	endif;
endif;
PROC TAW_3

preproc ask if TAW_1 <> "97" OR TAW_2 <> "97";
PROC TAW_3_OTH

preproc ask if TAW_3 = 7;

if TAW_3 = 7 then
	setproperty($,"HideInCaseTree", "No");
endif;


postproc

// Validate that field is not blank
NotAllowBlankOtherSpecify($);
