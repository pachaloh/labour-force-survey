{Application 'CHILDLFS' logic file generated by CSPro}
PROC GLOBAL

	string nav_week_start_day = "Monday";
	string nav_week_end_day = "Sunday";
	string last_4weeks_start_date; 
	string last_week_end_date;
	string nav_week_end_day_yesterday;
	string nav_job_type_short;
	numeric age_proxy = 0;
	numeric OPF_HFOOD_LEN;
	string FOOD_STRING;
	
{	
	// Set week_end_date varaible to "yesterday" when (Today â 1) = week_end_date
	if timestring("%A", timestamp() - 86400) = nav_week_end_day and XGHVFDT = sysdate("YYYYMMDD") then
		last_week_end_date = "yesterday";
		nav_week_end_day_yesterday = "yesterday";
	else
		last_week_end_date ="last " + nav_week_end_day;
		nav_week_end_day_yesterday = nav_week_end_day;
	endif;
}	

	function string name_of_hh_head()
		loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO);
		name_of_hh_head = DEM_NAME(1);
	end;




// Functions to (re)set variables for interviewee name/proxy and sex:
	// (Re)set Sex variables:
	function string get_his_her()
		if XDEM_SEX = 1 then
		 	get_his_her = "his";
		else get_his_her = "her";
		endif;
	end;
	
	function string get_him_herself()
		if XDEM_SEX = 1 then
		 	get_him_herself = toupper("himself");
		else get_him_herself = toupper("herself");
		endif;
	end;
	
	// (Re)set Proxy varaibles:
	function string get_you_name()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_you_name = toupper(strip(XDEM_NAME));
		else get_you_name = "you";
		endif;
	end;
	
	function string get_do_does()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_do_does = "does";
		else get_do_does = "do";
		endif;
	end;
	
	function string get_have_has()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_have_has = "has";
		else get_have_has = "have";
		endif;
	end;
	
		function string get_were_was()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_were_was = "was";
		else get_were_was = "were";
		endif;
	end;
	
	function string get_work_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_work_s = "works";
		else get_work_s = "work";
		endif;
	end;
	
	function string get_are_is()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_are_is = "is";
		else get_are_is = "are";
		endif;
	end;
	
	function string get_your_names()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_your_names = toupper(strip(XDEM_NAME))+"'s";
		else get_your_names = "your";
		endif;
	end;
	
	function string get_this_names()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_this_names = toupper(strip(XDEM_NAME))+"'s";
		else get_this_names = "this";
		endif;
	end;
	
	function string get_want_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_want_s = "wants";
		else get_want_s = "want";
		endif;
	end;
	
	function string get_offer_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_offer_s = "offers";
		else get_offer_s = "offer";
		endif;
	end;
	
	function string get_expect_s()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_expect_s = "expects";
		else get_expect_s = "expect";
		endif;
	end;
	
	// (Re)set Proxy variables that have to start with capital letters:
	function string get_c_were_was()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_were_was = "Was";
		else get_c_were_was = "Were";
		endif;
	end;
	
	function string get_c_do_does()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_do_does = "Does";
		else get_c_do_does = "Do";
		endif;
	end;
	
	function string get_c_are_is()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_are_is = "Is";
		else get_c_are_is = "Are";
		endif;
	end;
	
	function string get_c_you_name()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_you_name = toupper(strip(XDEM_NAME));
		else get_c_you_name = "You";
		endif;
	end;
	
	function string get_c_have_has()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	get_c_have_has = "Has";
		else get_c_have_has = "Have";
		endif;
	end;
	

	// (Re)set Proxy/Sex:
		function string get_you_he_she()
			if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
			 	if XDEM_SEX = 1 then
			 	get_you_he_she = "he";
				else get_you_he_she = "she";
				endif;
			else get_you_he_she = "you";
			endif;
		end;
				
		function string get_your_his_her()
			if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
			 	if XDEM_SEX = 1 then
					get_your_his_her = "his";
				else 
					get_your_his_her = "her";
				endif;
			else 
				get_your_his_her = "your";
			endif;
		end;
	
	function string get_yourself_himself_herself()
		if RSP_AVAIL  = 2 or RSP_DIR  = 2 then
		 	if XDEM_SEX = 1 then
				get_yourself_himself_herself = "himself";
			else 
				get_yourself_himself_herself = "herself";
			endif;
		else 
			get_yourself_himself_herself = "yourself";
		endif;
	end;
	








PROC A4
preproc
{loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHHHNO);
	
	$ = DEM_MONTH_AND_DOB(CHMPPNO); 		
	
	noinput;}
PROC CHILDLFS_FF


PROC CHILD_INTV_DATE

preproc
	
	if CHILD_INTV_DATE = notappl then
		CHILD_INTV_DATE = sysdate();
		
	endif;
	
	setproperty($, "Protected", "Yes");
PROC CHILD_START_TIME

preproc
	
	if CHILD_START_TIME = notappl then
		CHILD_START_TIME = timestamp();
		
	endif;
	
	setproperty($, "Protected", "Yes");
PROC RESP_LINE_NO
	
onfocus 

	valueset numeric hh_members;
	
	//Loop through already assigned households for a specific interviewer
	forcase HOUSEHOLDLFS_DICT where CLUSTER = CCLUSTER and GHHHNO = CGHHHNO do 
		do varying numeric ctr = 1 while ctr <= GHHHSIZE
			if {HMPPNO(ctr) <> CHMPPNO and} DEM_06(ctr) >= 12 then //Agree on age of respondent; what if age is unknown but an adult
				hh_members.add(DEM_NAME(ctr),HMPPNO(ctr));
			endif
		enddo;
	endfor;
	
	hh_members.add("CHILD IS INCAPACITATED",97); 		//Child incapacitated
	hh_members.add("CHILD NOT AVAILABLE",98); 		//Not implemented: To apply to those whose questionnaire cannot be filled by other members when they are away for long time
	hh_members.add("REFUSED",99); 			   		//Not implemented: To apply to those whose questionnaire cannot be filled 
	setvalueset($,hh_members);
	
	

postproc


	if $ in 97,98,99 then
		skip to CHILD_END_TIME;
	endif;

	
	if loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO) and RESP_LINE_NO = HH_RESP_LN then			
		
			A1 	   = DEM_NAME(CHMPPNO); 	//Copy name of child from the household	
			A2     = DEM_02(CHMPPNO); 		//Copy relationship to household head from the household	
			A3     = DEM_01(CHMPPNO); 		//Sex
			A4_DOB = DEM_03(CHMPPNO); 		//Month of birth
			A4_MOB = DEM_04(CHMPPNO); 		//Month of birth
			A4_YOB = DEM_05(CHMPPNO);		//Year of birth 
			A5     = DEM_06(CHMPPNO); 		//Relationship to household head
			
			skip to A7;
	else
			A1 = DEM_NAME(CHMPPNO); 		//Copy name of child from the household	
			skip to A2;
		
	endif;
	
	
PROC A1
preproc
	noinput;	

postproc
	
{		
	if loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO) and RESP_LINE_NO = HH_RESP_LN then
	
		A2 	   = DEM_02(CHMPPNO); 	//Copy relationship to head from the household data
		A3     = DEM_01(CHMPPNO);	//Copy sex
		A4_MOB = DEM_04(CHMPPNO);	//Month of birth
		A4_YOB = DEM_05(CHMPPNO);	//Year of birth
		A5     = DEM_06(CHMPPNO); 	//Age
		A6A    = DEM_10(CHMPPNO);	//Highest level of education completed
		A6B    = DEM_11(CHMPPNO);	//Highest class completed
		
		
		skip to A7;

		
	endif;
}
PROC A2

preproc

		loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO);	
		A2 	= DEM_02(CHMPPNO); 	//Copy relationship to head from the household data
		noinput;
PROC A4_DOB

preproc 

	{loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHHHNO);

		$ = DEM_MONTH_AND_DOB(CHMPPNO); 		
		noinput;}

PROC A4_MOB

preproc

{
loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO);
	
	A4_MOB = DEM_04(CHMPPNO); 		
	
	noinput;
}	
PROC A4_YOB

preproc

postproc
	//Year should be consistent with age range of 0-65 years
	if $ > sysdate("YYYY") or $ < (sysdate("YYYY") - 120) then 
		errmsg("Invalid date");
		reenter;
	endif;
	
	if loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO) and A4_YOB  <> DEM_05(CHMPPNO) then
		errmsg("Year of birth (%d) for %s different from HH's (%d)",$,A1,DEM_05(CHMPPNO));
		
		//skip to RSP_END;
			
	endif;
PROC A5

preproc

postproc

	if A5 = (sysdate("YYYY") - A4_YOB) or A5 = ((sysdate("YYYY") - A4_YOB) -1) then
	else
		errmsg("The entered age is inconsistent! Correct age is %d or %d",(sysdate("YYYY") - A4_YOB),((sysdate("YYYY") - A4_YOB) -1))
			select("No, reenter Year",A4_YOB,
				   "No, reenter Month",A4_MOB,
				   "Reenter age",reenter);
		//reenter;
		
	endif;
{	
	if $ > 17 or $ < 5 then
		errmsg("Confirm that %s is %d years",A1,A5)
			select("No, reenter Year",A4_YOB,
				   "No, reenter month",A4_MOB,
				   "Reenter age",$,"Confirm",continue);
		
		savepartial();	   
		errmsg("Eligibility for %s has changed! Your supervisor MUST approve of this!",A1);
		skip to CHILD_END_TIME;
	endif;
}
PROC A6A

Preproc

{
loadcase(HOUSEHOLDLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO);
	
	A6 = DEM_10(CHMPPNO); 		
	
	noinput;
}
PROC A6B

onfocus
	
	if A6A = 0 then
		A6B = 1;
	elseif A6A = 1 then
		setvalueset($,A6B_VS1);
	elseif A6A = 2 then
		setvalueset($,A6B_VS2);
	elseif A6A = 3 then
		setvalueset($,A6B_VS3);
	elseif A6A = 4 then
		setvalueset($,A6B_VS4);	
	endif;
PROC B0_INTRO

preproc

	if locate(INDIVIDUALLFS_DICT,=,maketext("%v%v%v%v",CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO)) and loadcase(INDIVIDUALLFS_DICT) and ATW_PAY <> notappl then 
	
		$ = 1; 	
	
	noinput; 
	endif;
PROC B1

preproc

if locate(INDIVIDUALLFS_DICT,=,maketext("%v%v%v%v",CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO)) and loadcase(INDIVIDUALLFS_DICT) and ATW_PAY <> notappl then 
	
	$ = ATW_PAY; 		//Work for pay
	
	noinput; 
endif;
	
postproc	

	if B1 = 1 then
		skip to B8;
	endif;


PROC B2
preproc


if locate(INDIVIDUALLFS_DICT,=,maketext("%v%v%v%v",CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO)) and loadcase(INDIVIDUALLFS_DICT) and ATW_PFT <> notappl  then 
	
	$ = ATW_PFT; 		//Work for pay
	
	noinput; 
endif;
	

Postproc
	if B2 = 1 then
		skip to B6;
	endif;


PROC B3

preproc

	if locate(INDIVIDUALLFS_DICT,=,maketext("%v%v%v%v",CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO)) and loadcase(INDIVIDUALLFS_DICT) and ATW_FAM <> notappl then 
		
		$ = ATW_FAM; 		//Work for pay
		
		noinput; 
	endif;
	
postproc

	if B3 = 1 then
		skip to B6;
	endif;


PROC B4

preproc

	if locate(INDIVIDUALLFS_DICT,=,maketext("%v%v%v%v",CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO)) and loadcase(INDIVIDUALLFS_DICT) and ABS_JOB <> notappl then 
		
		$ = ABS_JOB; 		//Work for pay
		
		noinput; 
	endif;

postproc

	if B4 = 1 then
		skip to B6;
	endif;



PROC B5


preproc

	if loadcase(INDIVIDUALLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO) and AGF_ANY <> ""  then 		
		$ = toupper(AGF_ANY); 		//		
		noinput; 
	endif;
	


postproc

	if pos("A",B5) + pos("B", B5) + pos("C",B5) + pos("D", B5) = 0  then
		errmsg("Select at least an option");
		reenter;
	endif;

	if (pos("A",B5) >0 or pos("B", B5) > 0 or pos("C",B5)> 0)  and  pos("D", B5) > 0  then
		errmsg("Invalid Selection");
		reenter;
	endif;

	if pos("A",B5) >0 or pos("B", B5) > 0 or pos("C",B5)> 0 then
		skip to B7;
	elseif pos("D", B5) > 0 then
		skip to C1;
	endif;


PROC B6

preproc

	if loadcase(INDIVIDUALLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO) and AGF_CHK <> ""  then 		
		$ = toupper(AGF_CHK); 		//Work for pay		
		noinput; 
	endif;
	
postproc

	if (pos("A",B6) >0 or pos("B", B6) > 0 or pos("C",B6)> 0)  and  pos("D", B6) > 0  then
		errmsg("Invalid Selection");
		reenter;
	endif;


	if pos("A",B6) >0 or pos("B", B6) > 0 or pos("C",B6)> 0 then
		skip to B7;
	elseif pos("D", B6) > 0 then
		skip to B9;
	endif;


PROC B7

preproc

	if loadcase(INDIVIDUALLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO) and AGF_MKT <> notappl then 		
		$ = AGF_MKT; 				
		noinput; 
	endif;
	


postproc

	if B7 in 1:2 then
		skip to B9
	endif;


PROC B8


preproc

	if loadcase(INDIVIDUALLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO) and AGF_HIR <> notappl then 		
		$ = AGF_HIR; 		
		noinput; 
	endif;
	


postproc

	if B8 = 1 then
		skip to B9;
	elseif B8=2 then
		skip to C1;
	endif;


PROC B9


preproc

	if loadcase(INDIVIDUALLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO) and AGF_GDS <> "" then 		
		$ = AGF_GDS; 			
		noinput; 
	endif;
	
PROC B11

preproc

	if loadcase(INDIVIDUALLFS_DICT,CCLUSTER,CGHINTID,CGHHHNO,CHMPPNO) and AGF_DYS <> notappl then 		
		$ = AGF_DYS; 		
		noinput; 
	endif;
	
postproc

	if B11 <=0 then
		skip to C1
	endif;


PROC C1

	if C1= 2 then
		skip to C3;
	endif;


PROC C3_01

if $ = 2 then
	skip to C3_02;
endif;
PROC C3_02


if $ = 2 then
	skip to C3_03;
endif;
PROC C3_03


if $ = 2 then
	skip to C3_04;
endif;
PROC C3_04


if $ = 2 then
	skip to C3_05;
endif;
PROC C3_05


if $ = 2 then
	skip to C3_06;
endif;
PROC C3_06


if $ = 2 then
	skip to C3_07;
endif;
PROC C3_07


if $ = 2 then
	skip to C3_08;
endif;
PROC C3_08


if $ = 2 then
	skip to C4;
endif;
PROC C4
	
preproc
	ask if C3_01=01 or 
		   C3_02=01 or 
		   C3_03=01 or 
		   C3_04=01 or 
		   C3_05=01 or  
		   C3_06=01 or 
		   C3_07=01 or  
		   C3_08=01;
	
	C4 = C3_01B + C3_02B + C3_03B + C3_04B + C3_05B + C3_06B + C3_07B + C3_08B;
		
	skip to D0;
	
		
PROC D0

preproc

	if	B1 = 1 or B2 = 1 or B3 =1 or B4 = 1 or 
		C1 = 1 or 
		C3_01 = 1 or C3_02 = 1 or C3_03 = 1 or 
		C3_04 = 1 or C3_05 = 1 or C3_06 = 1 or 
		C3_07 = 1 or C3_08 = 1 then

		D0=1;
	else
		D0=0;

	endif;

noinput;

	if D0=0 then
		skip to E00_INTRO;
	endif;


postproc

	if D0=0 then
		skip to E00_INTRO;
	endif;


PROC D1


preproc

	
	if D0=0 then
		skip to E1;
	endif;
PROC E1A

preproc
	ask if E1 = 1;
PROC E2A

preproc
	ask if E2 = 1;
PROC E3A

preproc
	ask if E3 = 1;
PROC E4

preproc

PROC E4A

preproc
	ask if E4 = 1;
	
PROC E5

preproc
	ask if E4 = 1;
	
{
	if $ = 2 then
		skip to E6;
	endif;
}
PROC E5A

preproc
	ask if E5 = 1;
PROC E6


	if $ = 2 then
		skip to E7;
	endif;
PROC E7

	if E7 = 2 then
		skip to E11
	endif;


PROC E8


	if $ = 2 then
		skip to E9;
	endif;
PROC E9


PROC E9A

preproc
	ask if E9 = 1;
	
PROC E10
	
PROC E10A

preproc
	ask if E10 = 1;
	
PROC E11

	if E11 = 2 then
		skip to E15
	endif;


PROC E12


	if $ = 2 then
		skip to E13;
	endif;
	
PROC E13

	if $ = 2 then
		skip to E14;
	endif;
	
PROC E14

	if $ = 2 then
		skip to E15;
	endif;
	
PROC E15

	if E15 = 2 then
		skip to E19
	endif;


PROC E16

	if $ = 2 then
		skip to E17;
	endif;
	
PROC E17

	if $ = 2 then
		skip to E18;
	endif;
	
PROC E18

	if $ = 2 then
		skip to E19;
	endif;
	
PROC E19

	if $ = 2 then
		skip to E20;
	endif;
	
PROC E20

preproc
	//ask if E1=01 or E4=01 or E7=01 or E11=01 or E15=01 or  E19=01;
	
	E20 = E1A + E2A + E3A + E4A + E5A + E6A + E7A + E8A + E9A + E10A +
		  E11A + E12A + E13A + E14A + E15A + E16A + E17A + E18A + E19A;
		  
		  skip to CHILD_END_TIME;
		
PROC CHILD_END_TIME


preproc
	
	if CHILD_END_TIME = notappl then
		CHILD_END_TIME = timestamp();
	endif;
	
	setproperty($, "Protected", "Yes");
PROC CHILD_END_RESULT

if RESP_LINE_NO in 97,98,99 and $ in 1,5 then
	errmsg("Incorrect option");
	reenter;
endif;
